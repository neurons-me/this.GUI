this is a file providing the components of THIS.GUI that have been constructed, to take as an example of the schema and structure.
-------------

/* src/stories/Atoms/Alert/Alert.css */

/* Base Alert Styles */

.alert {

  padding: var(--spacing-sm) var(--spacing-md);

  border-radius: var(--border-radius);

  font-family: var(--font-family);

  font-size: var(--font-size-base);

  display: flex;

  align-items: center;

  box-shadow: var(--box-shadow);

  margin-bottom: var(--spacing-md);

  transition: 

​    background-color var(--transition-speed),

​    border-color var(--transition-speed),

​    color var(--transition-speed);

  

  /* Default Colors (Primary Variant) */

  background-color: var(--alert-bg-color, var(--primary-color));

  color: var(--alert-text-color, var(--text-color-inverse));

  border: 1px solid var(--alert-border-color, var(--primary-color));

  

  /* Entrance Animation */

  animation: fadeIn 0.3s ease-out;

}

/* Primary Variant */

.alert--primary {

  /* Primary Variant Colors */

  --alert-bg-color: var(--primary-color);

  --alert-text-color: var(--text-color-inverse);

  --alert-border-color: var(--primary-color);

  

  /* Hover Colors */

  --alert-bg-hover-color: var(--primary-color-hover);

  --alert-border-hover-color: var(--primary-color-hover);

}

.alert--primary:hover {

  background-color: var(--alert-bg-hover-color);

  border-color: var(--alert-border-hover-color);

}

/* Secondary Variant */

.alert--secondary {

  /* Secondary Variant Colors */

  --alert-bg-color: transparent;

  --alert-text-color: var(--secondary-color);

  --alert-border-color: var(--secondary-color);

  

  /* Hover Colors */

  --alert-bg-hover-color: var(--secondary-color-hover);

  --alert-border-hover-color: var(--secondary-color-hover);

  --alert-text-hover-color: var(--text-color-inverse);

}

.alert--secondary:hover {

  background-color: var(--alert-bg-hover-color);

  color: var(--alert-text-hover-color);

  border-color: var(--alert-border-hover-color);

}

/* Semantic Color Modifiers for Primary Variant */

.alert--primary.alert--info {

  --alert-bg-color: var(--info-color);

  --alert-border-color: var(--info-color);

  

  /* Hover Colors */

  --alert-bg-hover-color: var(--info-color-hover);

  --alert-border-hover-color: var(--info-color-hover);

}

.alert--primary.alert--warning {

  --alert-bg-color: var(--warning-color);

  --alert-border-color: var(--warning-color);

  

  /* Hover Colors */

  --alert-bg-hover-color: var(--warning-color-hover);

  --alert-border-hover-color: var(--warning-color-hover);

}

.alert--primary.alert--alert {

  --alert-bg-color: var(--alert-color);

  --alert-border-color: var(--alert-color);

  --alert-text-color: var(--text-color); /* Dark text for readability */

  

  /* Hover Colors */

  --alert-bg-hover-color: var(--alert-color-hover);

  --alert-border-hover-color: var(--alert-color-hover);

}

.alert--primary.alert--success {

  --alert-bg-color: var(--success-color);

  --alert-border-color: var(--success-color);

  

  /* Hover Colors */

  --alert-bg-hover-color: var(--success-color-hover);

  --alert-border-hover-color: var(--success-color-hover);

}

.alert--primary.alert--neutral {

  --alert-bg-color: var(--neutral-color);

  --alert-border-color: var(--neutral-color);

  

  /* Hover Colors */

  --alert-bg-hover-color: var(--neutral-color-hover);

  --alert-border-hover-color: var(--neutral-color-hover);

}

.alert--primary.alert--dark {

  --alert-bg-color: var(--dark-color);

  --alert-border-color: var(--dark-color);

  --alert-text-color: var(--text-color-inverse); /* White text on dark background */

  

  /* Hover Colors */

  --alert-bg-hover-color: var(--dark-color-hover);

  --alert-border-hover-color: var(--dark-color-hover);

}

/* Semantic Color Modifiers for Secondary Variant */

.alert--secondary.alert--info {

  --alert-text-color: var(--info-color);

  --alert-border-color: var(--info-color);

  

  /* Hover Colors */

  --alert-bg-hover-color: var(--info-color-hover);

  --alert-border-hover-color: var(--info-color-hover);

}

.alert--secondary.alert--warning {

  --alert-text-color: var(--warning-color);

  --alert-border-color: var(--warning-color);

  

  /* Hover Colors */

  --alert-bg-hover-color: var(--warning-color-hover);

  --alert-border-hover-color: var(--warning-color-hover);

}

.alert--secondary.alert--alert {

  --alert-text-color: var(--alert-color);

  --alert-border-color: var(--alert-color);

  

  /* Hover Colors */

  --alert-bg-hover-color: var(--alert-color-hover);

  --alert-border-hover-color: var(--alert-color-hover);

}

.alert--secondary.alert--success {

  --alert-text-color: var(--success-color);

  --alert-border-color: var(--success-color);

  

  /* Hover Colors */

  --alert-bg-hover-color: var(--success-color-hover);

  --alert-border-hover-color: var(--success-color-hover);

}

.alert--secondary.alert--neutral {

  --alert-text-color: var(--neutral-color);

  --alert-border-color: var(--neutral-color);

  

  /* Hover Colors */

  --alert-bg-hover-color: var(--neutral-color-hover);

  --alert-border-hover-color: var(--neutral-color-hover);

}

.alert--secondary.alert--dark {

  --alert-text-color: var(--dark-color);

  --alert-border-color: var(--dark-color);

  

  /* Hover Colors */

  --alert-bg-hover-color: var(--dark-color-hover);

  --alert-border-hover-color: var(--dark-color-hover);

}

/* Optional: Icon Styles */

.alert__icon {

  margin-right: var(--spacing-sm);

  font-size: 1.2em;

}

/* Optional: Close Button Styles */

.alert__close {

  margin-left: auto;

  background: none;

  border: none;

  color: inherit;

  cursor: pointer;

  font-size: 1.2em;

}

/* Dismissible Modifier */

.alert--dismissible {

  padding-right: var(--spacing-md);

}

/* Keyframes for fade-in */

@keyframes fadeIn {

  from {

​    opacity: 0;

​    transform: translateY(-10px);

  }

  to {

​    opacity: 1;

​    transform: translateY(0);

  }

}

/* Apply animation to alert */

.alert {

  animation: fadeIn 0.3s ease-out;

}



---

// src/stories/Atoms/Alert/Alert.jsx
import React from 'react';
import PropTypes from 'prop-types';
import './Alert.css'; // Import the CSS styles

export const Alert = ({
  variant = 'primary', // 'primary', 'secondary'
  color, // 'info', 'warning', 'alert', 'success', 'neutral', 'dark'
  children,
  className = '',
  style = {},
  onClose, // Function to handle close action
  dismissible = false, // If true, show close button
  icon, // Optional icon element
  ...props
}) => {
  const variantClass = `alert--${variant}`;
  const colorClass = color ? `alert--${color}` : '';
  const dismissibleClass = dismissible ? 'alert--dismissible' : '';

  const combinedClassName = `alert ${variantClass} ${colorClass} ${dismissibleClass} ${className}`.trim();

  return (

    <div
      className={combinedClassName}
      style={style}
      role="alert"
      aria-live="assertive"
      {...props}
    >
      {icon && <span className="alert__icon">{icon}</span>}
      <span className="alert__content">{children}</span>
      {dismissible && (
        <button
          className="alert__close"
          onClick={onClose}
          aria-label="Close Alert"
          tabIndex="0"
        >
          &times;
        </button>
      )}
    </div>

  );
};

Alert.propTypes = {
  variant: PropTypes.oneOf(['primary', 'secondary']),
  color: PropTypes.oneOf(['info', 'warning', 'alert', 'success', 'neutral', 'dark']),
  children: PropTypes.node.isRequired,
  className: PropTypes.string,
  style: PropTypes.object,
  onClose: PropTypes.func,
  dismissible: PropTypes.bool,
  icon: PropTypes.node,
};



----



// src/stories/Atoms/Alert/Alert.stories.jsx

import React from 'react';

import { Alert } from './Alert';

import './Alert.css'; // Import the CSS styles

export default {

  title: 'Atoms/Feedback/Alert',

  component: Alert,

  argTypes: {

​    variant: {

​      control: {

​        type: 'select',

​        options: ['primary', 'secondary'],

​      },

​      description: 'Variant of the alert.',

​      table: {

​        type: { summary: 'primary | secondary' },

​        defaultValue: { summary: 'primary' },

​      },

​    },

​    color: {

​      control: {

​        type: 'select',

​        options: ['info', 'warning', 'alert', 'success', 'neutral', 'dark'],

​      },

​      description: 'Semantic color of the alert.',

​      table: {

​        type: { summary: `'info' | 'warning' | 'alert' | 'success' | 'neutral' | 'dark'` },

​      },

​    },

​    children: {

​      control: 'text',

​      description: 'Content of the alert.',

​      table: {

​        type: { summary: 'node' },

​      },

​    },

​    dismissible: {

​      control: 'boolean',

​      description: 'If true, shows a close button to dismiss the alert.',

​      table: {

​        type: { summary: 'boolean' },

​        defaultValue: { summary: false },

​      },

​    },

​    onClose: {

​      action: 'closed',

​      description: 'Function called when the alert is dismissed.',

​      table: {

​        type: { summary: 'function' },

​      },

​    },

​    icon: {

​      control: 'none', // Typically, icons are not controlled via Storybook controls

​      description: 'Optional icon to display in the alert.',

​      table: {

​        type: { summary: 'node' },

​      },

​    },

​    className: {

​      control: 'text',

​      description: 'Additional CSS classes.',

​      table: {

​        type: { summary: 'string' },

​      },

​    },

​    style: {

​      control: 'object',

​      description: 'Inline styles.',

​      table: {

​        type: { summary: 'object' },

​      },

​    },

  },

};

/**

 \* 

 \* Shows default primary and secondary alerts without any semantic color.

 */

export const DefaultAlerts = () => (

  <div style={{ display: 'flex', gap: '10px', flexWrap: 'wrap' }}>

​    <Alert variant="primary">Primary Default Alert</Alert>

​    <Alert variant="secondary">Secondary Default Alert</Alert>

  </div>

);

/**

 \* 

 \* Demonstrates primary alerts with all semantic colors.

 */

export const PrimaryAlerts = () => (

  <div style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>

​    <h3>Primary Alerts</h3>

​    {['info', 'warning', 'alert', 'success', 'neutral', 'dark'].map((color) => (

​      <Alert key={color} variant="primary" color={color}>

​        This is a {color} primary alert.

​      </Alert>

​    ))}

  </div>

);

/**

 \* 

 \* Demonstrates secondary alerts with all semantic colors.

 */

export const SecondaryAlerts = () => (

  <div style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>

​    <h3>Secondary Alerts</h3>

​    {['info', 'warning', 'alert', 'success', 'neutral', 'dark'].map((color) => (

​      <Alert key={color} variant="secondary" color={color}>

​        This is a {color} secondary alert.

​      </Alert>

​    ))}

  </div>

);

/**

 \* 

 \* Demonstrates primary and secondary alerts that can be dismissed.

 */

export const DismissibleAlerts = () => (

  <div style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>

​    <h3>Dismissible Primary Alerts</h3>

​    {['info', 'warning', 'alert', 'success', 'neutral', 'dark'].map((color) => (

​      <Alert

​        key={color}

​        variant="primary"

​        color={color}

​        dismissible

​        onClose={() => alert(`Closed ${color} primary alert`)}

​      \>

​        This is a {color} primary alert that can be dismissed.

​      </Alert>

​    ))}

​    <h3>Dismissible Secondary Alerts</h3>

​    {['info', 'warning', 'alert', 'success', 'neutral', 'dark'].map((color) => (

​      <Alert

​        key={color}

​        variant="secondary"

​        color={color}

​        dismissible

​        onClose={() => alert(`Closed ${color} secondary alert`)}

​      \>

​        This is a {color} secondary alert that can be dismissed.

​      </Alert>

​    ))}

  </div>

);

/**

 \* ### Interactive Playground

 \* 

 \* Allows dynamic interaction with the alert props via Storybook controls.

 */

const Template = (args) => <Alert {...args} />;

export const Playground = Template.bind({});

Playground.args = {

  variant: 'primary',

  color: 'info',

  children: 'This is an interactive alert.',

  dismissible: false,

};

Playground.storyName = 'Interactive Playground';



----



/* src/stories/Atoms/Audio/Audio.css */

/* Base Audio Player Styles */

.audio {

  display: flex;

  align-items: center;

  background-color: rgba(245, 245, 245, 0.3); /* Subtle grey with low opacity */

  padding: var(--spacing-sm, 8px);

  border-radius: var(--border-radius, 6px);

  gap: var(--spacing-sm, 8px);

  max-width: 300px; /* Default for medium size */

  border: 1px solid var(--border-color, #dddddd); /* Added border */

  position: relative;

  transition: background-color var(--transition-speed, 0.3s);

}

.audio:hover {

  background-color: rgba(245, 245, 245, 0.5);

}

/* Size Variants */

.audio--small {

  max-width: 200px;

}

.audio--medium {

  max-width: 300px;

}

/* Color Classes */

.audio--classy-color-1 {

  --icon-color: var(--classy-color-1);

}

.audio--classy-color-2 {

  --icon-color: var(--classy-color-2);

}

.audio--classy-color-3 {

  --icon-color: var(--classy-color-3);

}

.audio--classy-color-4 {

  --icon-color: var(--classy-color-4);

}

.audio--classy-color-5 {

  --icon-color: var(--classy-color-5);

}

.audio--small-switch-color-1 {

  --icon-color: var(--small-switch-color-1);

}

.audio--small-switch-color-2 {

  --icon-color: var(--small-switch-color-2);

}

.audio--natural-color-1 {

  --icon-color: var(--natural-color-1);

}

.audio--natural-color-2 {

  --icon-color: var(--natural-color-2);

}

.audio--natural-color-3 {

  --icon-color: var(--natural-color-3);

}

.audio--grey-friend-1 {

  --icon-color: var(--grey-friend-1);

}

.audio--grey-friend-2 {

  --icon-color: var(--grey-friend-2);

}

.audio--shade-1 {

  --icon-color: var(--shade-1);

}

.audio--shade-2 {

  --icon-color: var(--shade-2);

}

.audio--shade-3 {

  --icon-color: var(--shade-3);

}

.audio--shade-4 {

  --icon-color: var(--shade-4);

}

/* Play/Pause and Mute Buttons */

.audio__play-pause,

.audio__mute {

  background-color: rgba(128, 128, 128, 0.2); /* Slightly darker grey */

  border: none;

  border-radius: 50%;

  padding: var(--spacing-xs, 6px);

  cursor: pointer;

  transition: background-color var(--transition-speed, 0.3s);

  display: flex;

  align-items: center;

  justify-content: center;

  color: var(--icon-color, #344b47); /* Default icon color */

}

.audio__play-pause:hover,

.audio__mute:hover {

  background-color: rgba(128, 128, 128, 0.4); /* Darker on hover */

}

/* Time Display and Seek Slider */

.audio__seek {

  display: flex;

  align-items: center;

  gap: var(--spacing-xs, 4px);

  flex: 1;

}

.audio__seek-slider {

  width: 100%;

  cursor: pointer;

  appearance: none;

  height: 4px;

  background: var(--grey-friend-2, #96b1ac);

  border-radius: 2px;

  outline: none;

  transition: background var(--transition-speed, 0.3s);

}

.audio__seek-slider::-webkit-slider-thumb {

  appearance: none;

  width: 12px;

  height: 12px;

  background: var(--icon-color, #344b47);

  border-radius: 50%;

  cursor: pointer;

  margin-top: -4px; /* Center the thumb */

  transition: background var(--transition-speed, 0.3s);

}

.audio__seek-slider::-moz-range-thumb {

  width: 12px;

  height: 12px;

  background: var(--icon-color, #344b47);

  border-radius: 50%;

  cursor: pointer;

  transition: background var(--transition-speed, 0.3s);

}

.audio__seek-slider:hover {

  background: var(--grey-friend-1, #344b47);

}

.audio__seek-slider:hover::-webkit-slider-thumb,

.audio__seek-slider:hover::-moz-range-thumb {

  background: var(--icon-color, #344b47);

}

.audio__time {

  font-size: var(--font-size-small, 0.9em);

  color: var(--icon-color, #344b47); /* Inherit icon color */

  white-space: nowrap;

}

/* Volume Container */

.audio__volume-container {

  position: relative;

  display: flex;

  align-items: center;

}

/* Volume Slider */

.audio__volume-slider {

  position: absolute;

  bottom: -30px;

  left: 50%;

  transform: translateX(-50%);

  width: 100px;

  cursor: pointer;

  appearance: none;

  height: 4px;

  background: var(--grey-friend-2, #96b1ac);

  border-radius: 2px;

  outline: none;

  transition: opacity var(--transition-speed, 0.3s);

  opacity: 0;

  pointer-events: none;

  z-index: 10;

}

.audio__volume-slider.visible {

  opacity: 1;

  pointer-events: auto;

}

.audio__volume-slider::-webkit-slider-thumb {

  appearance: none;

  width: 12px;

  height: 12px;

  background: var(--icon-color, #344b47);

  border-radius: 50%;

  cursor: pointer;

  transition: background var(--transition-speed, 0.3s);

}

.audio__volume-slider::-moz-range-thumb {

  width: 12px;

  height: 12px;

  background: var(--icon-color, #344b47);

  border-radius: 50%;

  cursor: pointer;

  transition: background var(--transition-speed, 0.3s);

}

.audio__volume-slider:hover {

  background: var(--grey-friend-1, #344b47);

}

.audio__volume-slider:hover::-webkit-slider-thumb,

.audio__volume-slider:hover::-moz-range-thumb {

  background: var(--icon-color, #344b47);

}

/* Show Volume Slider on Hover or When Toggled */

.audio:hover .audio__volume-slider,

.audio__volume-slider.visible {

  opacity: 1;

  pointer-events: auto;

}

/* Responsive Adjustments */

@media (max-width: 768px) {

  .audio--small {

​    max-width: 150px;

  }

  .audio--medium {

​    max-width: 250px;

  }

  .audio {

​    flex-direction: column;

​    align-items: flex-start;

​    gap: var(--spacing-xs, 4px);

  }

  .audio__seek {

​    width: 100%;

  }

  .audio__volume-slider {

​    bottom: -35px;

​    width: 80px;

  }

}

-----

// src/stories/Atoms/Audio/Audio.jsx

import React, { useRef, useState, useEffect } from 'react';

import PropTypes from 'prop-types';

import { FaPlay, FaPause, FaVolumeUp, FaVolumeMute } from 'react-icons/fa';

import './Audio.css';

export const Audio = ({

  src,

  autoPlay = false,

  loop = false,

  muted = false,

  size = 'medium',

  color = 'classy-color-1',

  className = '',

  style = {},

  ...props

}) => {

  const audioRef = useRef(null);

  const [isPlaying, setIsPlaying] = useState(autoPlay);

  const [isMuted, setIsMuted] = useState(muted);

  const [volume, setVolume] = useState(muted ? 0 : 1);

  const [currentTime, setCurrentTime] = useState(0);

  const [duration, setDuration] = useState(0);

  const [showVolumeSlider, setShowVolumeSlider] = useState(false);

  useEffect(() => {

​    const audio = audioRef.current;

​    if (audio) {

​      audio.volume = volume;

​      audio.muted = isMuted;

​      if (autoPlay) {

​        audio.play().catch(() => setIsPlaying(false));

​      }

​    }

  }, [volume, isMuted, autoPlay]);

  const togglePlayPause = () => {

​    const audio = audioRef.current;

​    if (!audio) return;

​    if (isPlaying) {

​      audio.pause();

​    } else {

​      audio.play().catch(() => setIsPlaying(false));

​    }

​    setIsPlaying(!isPlaying);

  };

  const handleTimeUpdate = () => {

​    const audio = audioRef.current;

​    if (audio) {

​      setCurrentTime(audio.currentTime);

​    }

  };

  const handleLoadedMetadata = () => {

​    const audio = audioRef.current;

​    if (audio) {

​      setDuration(audio.duration);

​    }

  };

  const handleVolumeChange = (e) => {

​    const newVolume = parseFloat(e.target.value);

​    setVolume(newVolume);

​    setIsMuted(newVolume === 0);

  };

  const toggleMute = () => {

​    setIsMuted(!isMuted);

​    setVolume(!isMuted ? 0 : 1);

  };

  const handleSeekChange = (e) => {

​    const seekTime = parseFloat(e.target.value);

​    const audio = audioRef.current;

​    if (audio) {

​      audio.currentTime = seekTime;

​      setCurrentTime(seekTime);

​    }

  };

  const formatTime = (time) => {

​    if (isNaN(time)) return '00:00';

​    const minutes = Math.floor(time / 60);

​    const seconds = Math.floor(time % 60);

​    const paddedSeconds = seconds < 10 ? `0${seconds}` : seconds;

​    return `${minutes}:${paddedSeconds}`;

  };

  // Combined handler to toggle mute and show volume slider

  const handleMuteAndShowSlider = (e) => {

​    toggleMute();

​    setShowVolumeSlider((prev) => !prev);

​    e.stopPropagation();

  };

  // Close volume slider when clicking outside

  const handleClickOutside = (e) => {

​    if (!e.target.closest('.audio__volume-container')) {

​      setShowVolumeSlider(false);

​    }

  };

  useEffect(() => {

​    if (showVolumeSlider) {

​      document.addEventListener('click', handleClickOutside);

​    } else {

​      document.removeEventListener('click', handleClickOutside);

​    }

​    return () => {

​      document.removeEventListener('click', handleClickOutside);

​    };

  }, [showVolumeSlider]);

  const variantClass = `audio--${size}`;

  const colorClass = `audio--${color}`;

  const combinedClassName = `audio ${variantClass} ${colorClass} ${className}`.trim();

  return (

​    <div

​      className={combinedClassName}

​      style={style}

​      {...props}

​    \>

​      <audio

​        ref={audioRef}

​        src={src}

​        loop={loop}

​        onTimeUpdate={handleTimeUpdate}

​        onLoadedMetadata={handleLoadedMetadata}

​        onEnded={() => setIsPlaying(false)}

​      \>

​        Your browser does not support the audio element.

​      </audio>

​      <button

​        className="audio__play-pause"

​        onClick={togglePlayPause}

​        aria-label={isPlaying ? 'Pause' : 'Play'}

​      \>

​        {isPlaying ? <FaPause /> : <FaPlay />}

​      </button>

      <div className="audio__seek">

​        <input

​          type="range"

​          className="audio__seek-slider"

​          min="0"

​          max={duration}

​          step="0.1"

​          value={currentTime}

​          onChange={handleSeekChange}

​          aria-label="Seek Slider"

​        />

        <div className="audio__time">

​          <span>{formatTime(currentTime)}</span> / <span>{formatTime(duration)}</span>

​        </div>

​      </div>

      <div className="audio__volume-container">

​        <button

​          className="audio__mute"

​          onClick={handleMuteAndShowSlider}

​          aria-label={isMuted ? 'Unmute' : 'Mute'}

​        \>

​          {isMuted ? <FaVolumeMute /> : <FaVolumeUp />}

​        </button>

​        <input

​          type="range"

​          className={`audio__volume-slider ${showVolumeSlider ? 'visible' : ''}`}

​          min="0"

​          max="1"

​          step="0.01"

​          value={isMuted ? 0 : volume}

​          onChange={handleVolumeChange}

​          aria-label="Volume Slider"

​        />

​      </div>

​    </div>

  );

};

Audio.propTypes = {

  /** Source URL of the audio file */

  src: PropTypes.string.isRequired,

  /** Autoplay the audio on load */

  autoPlay: PropTypes.bool,

  /** Loop the audio playback */

  loop: PropTypes.bool,

  /** Mute the audio by default */

  muted: PropTypes.bool,

  /** Size of the audio player */

  size: PropTypes.oneOf(['small', 'medium']),

  /** Color from the global palettes */

  color: PropTypes.oneOf([

​    'classy-color-1',

​    'classy-color-2',

​    'classy-color-3',

​    'classy-color-4',

​    'classy-color-5',

​    'small-switch-color-1',

​    'small-switch-color-2',

​    'natural-color-1',

​    'natural-color-2',

​    'natural-color-3',

​    'grey-friend-1',

​    'grey-friend-2',

​    'shade-1',

​    'shade-2',

​    'shade-3',

​    'shade-4',

  ]),

  /** Additional CSS classes */

  className: PropTypes.string,

  /** Inline styles */

  style: PropTypes.object,

};



----



// src/stories/Atoms/Audio/Audio.stories.jsx

import React from 'react';

import { Audio } from './Audio';

import './Audio.css';

export default {

  title: 'Atoms/Media/Audio',

  component: Audio,

  argTypes: {

​    src: {

​      control: 'text',

​      description: 'Source URL of the audio file.',

​      table: {

​        type: { summary: 'string' },

​        defaultValue: { summary: 'required' },

​      },

​    },

​    autoPlay: {

​      control: 'boolean',

​      description: 'Autoplay the audio on load.',

​      table: {

​        type: { summary: 'boolean' },

​        defaultValue: { summary: 'false' },

​      },

​    },

​    loop: {

​      control: 'boolean',

​      description: 'Loop the audio playback.',

​      table: {

​        type: { summary: 'boolean' },

​        defaultValue: { summary: 'false' },

​      },

​    },

​    muted: {

​      control: 'boolean',

​      description: 'Mute the audio by default.',

​      table: {

​        type: { summary: 'boolean' },

​        defaultValue: { summary: 'false' },

​      },

​    },

​    size: {

​      control: {

​        type: 'select',

​        options: ['small', 'medium'],

​      },

​      description: 'Size of the audio player.',

​      table: {

​        type: { summary: 'small | medium' },

​        defaultValue: { summary: 'medium' },

​      },

​    },

​    color: {

​      control: {

​        type: 'select',

​        options: [

​          'classy-color-1',

​          'classy-color-2',

​          'classy-color-3',

​          'classy-color-4',

​          'classy-color-5',

​          'small-switch-color-1',

​          'small-switch-color-2',

​          'natural-color-1',

​          'natural-color-2',

​          'natural-color-3',

​          'grey-friend-1',

​          'grey-friend-2',

​          'shade-1',

​          'shade-2',

​          'shade-3',

​          'shade-4',

​        ],

​      },

​      description: 'Color from the global palettes for control icons.',

​      table: {

​        type: { summary: 'classy-color-1 | classy-color-2 | classy-color-3 | classy-color-4 | classy-color-5 | small-switch-color-1 | small-switch-color-2 | natural-color-1 | natural-color-2 | natural-color-3 | grey-friend-1 | grey-friend-2 | shade-1 | shade-2 | shade-3 | shade-4' },

​        defaultValue: { summary: 'classy-color-1' },

​      },

​    },

​    className: {

​      control: 'text',

​      description: 'Additional CSS classes.',

​      table: {

​        type: { summary: 'string' },

​      },

​    },

​    style: {

​      control: 'object',

​      description: 'Inline styles.',

​      table: {

​        type: { summary: 'object' },

​      },

​    },

  },

};

/**

 \* 

 \* Medium size with Classy Palette Color 1.

 */

export const DefaultAudio = () => (

  <Audio

​    src="https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3"

​    size="medium"

​    color="classy-color-1"

  />

);

/**

 \* 

 \* Medium size, autoplay enabled with Classy Palette Color 3.

 */

export const AutoplayAudio = () => (

  <Audio

​    src="https://www.soundhelix.com/examples/mp3/SoundHelix-Song-3.mp3"

​    autoPlay

​    size="medium"

​    color="classy-color-3"

  />

);

/**

 \* 

 \* Small size with Classy Palette Color 2.

 */

export const SmallAudio = () => (

  <Audio

​    src="https://www.soundhelix.com/examples/mp3/SoundHelix-Song-2.mp3"

​    size="small"

​    color="classy-color-2"

  />

);

/**

 \* 

 \* Medium size, looping enabled with Classy Palette Color 4.

 */

export const LoopingAudio = () => (

  <Audio

​    src="https://www.soundhelix.com/examples/mp3/SoundHelix-Song-4.mp3"

​    loop

​    size="medium"

​    color="classy-color-4"

  />

);

/**

 \* 

 \* Medium size, muted by default with Classy Palette Color 5.

 */

export const MutedAudio = () => (

  <Audio

​    src="https://www.soundhelix.com/examples/mp3/SoundHelix-Song-5.mp3"

​    muted

​    size="medium"

​    color="classy-color-5"

  />

);

/**

 \* 

 \* Medium size with custom styles and Classy Palette Color 1.

 */

export const CustomStyledAudio = () => (

  <Audio

​    src="https://www.soundhelix.com/examples/mp3/SoundHelix-Song-6.mp3"

​    size="medium"

​    color="classy-color-1"

​    style={{ border: '2px solid var(--classy-color-1)', borderRadius: '8px' }}

  />

);

/**

 \* ### Interactive Playground

 \* 

 \* Allows dynamic interaction with the audio props via Storybook controls.

 */

const Template = (args) => <Audio {...args} />;

export const Playground = Template.bind({});

Playground.args = {

  src: 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-7.mp3',

  autoPlay: false,

  loop: false,

  muted: false,

  size: 'medium',

  color: 'classy-color-1',

};

Playground.storyName = 'Interactive Playground';



----



.badge {

  display: inline-block;

  padding: 4px 8px;

  border-radius: 4px;

  font-size: 14px;

  font-weight: 600;

  text-align: center;

  white-space: nowrap;

  vertical-align: baseline;

  margin-right: 6px;

  margin-bottom: 6px;

  border: 1px solid transparent;

}

/* Size Variants */

.badge--small {

  padding: 2px 6px;

  font-size: 12px;

}

.badge--large {

  padding: 6px 12px;

  font-size: 16px;

}

/* Rounded Badge */

.badge--round {

  padding: 0 12px;

  border-radius: 50px; /* Pill shape */

  display: inline-flex;

  align-items: center;

  justify-content: center;

  font-size: 14px;

  white-space: nowrap;

}

/* Primary Badge Variants */

.badge--primary {

  background-color: var(--primary-color);

  color: var(--text-color-inverse);

}

/* Primary Color Variants */

.badge--primary.info {

  background-color: var(--info-color);

}

.badge--primary.warning {

  background-color: var(--warning-color);

}

.badge--primary.alert {

  background-color: var(--alert-color);

}

.badge--primary.success {

  background-color: var(--success-color);

}

.badge--primary.neutral {

  background-color: var(--neutral-color);

}

.badge--primary.dark {

  background-color: var(--dark-color);

}

.badge--primary.classy-color-1 {

  background-color: var(--classy-color-1);

}

.badge--primary.classy-color-2 {

  background-color: var(--classy-color-2);

}

.badge--primary.classy-color-3 {

  background-color: var(--classy-color-3);

}

.badge--primary.classy-color-4 {

  background-color: var(--classy-color-4);

}

.badge--primary.classy-color-5 {

  background-color: var(--classy-color-5);

}

.badge--primary.small-switch-color-1 {

  background-color: var(--small-switch-color-1);

}

.badge--primary.small-switch-color-2 {

  background-color: var(--small-switch-color-2);

}

.badge--primary.natural-color-1 {

  background-color: var(--natural-color-1);

}

.badge--primary.natural-color-2 {

  background-color: var(--natural-color-2);

}

.badge--primary.natural-color-3 {

  background-color: var(--natural-color-3);

}

.badge--primary.grey-friend-1 {

  background-color: var(--grey-friend-1);

}

.badge--primary.grey-friend-2 {

  background-color: var(--grey-friend-2);

}

.badge--primary.shade-1 {

  background-color: var(--shade-1);

}

.badge--primary.shade-2 {

  background-color: var(--shade-2);

}

.badge--primary.shade-3 {

  background-color: var(--shade-3);

}

.badge--primary.shade-4 {

  background-color: var(--shade-4);

}

/* Secondary Badge Variants */

.badge--secondary {

  background-color: transparent;

  border-color: var(--primary-color);

  color: var(--primary-color);

}

/* Secondary Color Variants */

.badge--secondary.info {

  border-color: var(--info-color);

  color: var(--info-color);

}

.badge--secondary.warning {

  border-color: var(--warning-color);

  color: var(--warning-color);

}

.badge--secondary.alert {

  border-color: var(--alert-color);

  color: var(--alert-color);

}

.badge--secondary.success {

  border-color: var(--success-color);

  color: var(--success-color);

}

.badge--secondary.neutral {

  border-color: var(--neutral-color);

  color: var(--neutral-color);

}

.badge--secondary.dark {

  border-color: var(--dark-color);

  color: var(--dark-color);

}

.badge--secondary.classy-color-1 {

  border-color: var(--classy-color-1);

  color: var(--classy-color-1);

}

.badge--secondary.classy-color-2 {

  border-color: var(--classy-color-2);

  color: var(--classy-color-2);

}

.badge--secondary.classy-color-3 {

  border-color: var(--classy-color-3);

  color: var(--classy-color-3);

}

.badge--secondary.classy-color-4 {

  border-color: var(--classy-color-4);

  color: var(--classy-color-4);

}

.badge--secondary.classy-color-5 {

  border-color: var(--classy-color-5);

  color: var(--classy-color-5);

}

.badge--secondary.small-switch-color-1 {

  border-color: var(--small-switch-color-1);

  color: var(--small-switch-color-1);

}

.badge--secondary.small-switch-color-2 {

  border-color: var(--small-switch-color-2);

  color: var(--small-switch-color-2);

}

.badge--secondary.natural-color-1 {

  border-color: var(--natural-color-1);

  color: var(--natural-color-1);

}

.badge--secondary.natural-color-2 {

  border-color: var(--natural-color-2);

  color: var(--natural-color-2);

}

.badge--secondary.natural-color-3 {

  border-color: var(--natural-color-3);

  color: var(--natural-color-3);

}

.badge--secondary.grey-friend-1 {

  border-color: var(--grey-friend-1);

  color: var(--grey-friend-1);

}

.badge--secondary.grey-friend-2 {

  border-color: var(--grey-friend-2);

  color: var(--grey-friend-2);

}

.badge--secondary.shade-1 {

  border-color: var(--shade-1);

  color: var(--shade-1);

}

.badge--secondary.shade-2 {

  border-color: var(--shade-2);

  color: var(--shade-2);

}

.badge--secondary.shade-3 {

  border-color: var(--shade-3);

  color: var(--shade-3);

}

.badge--secondary.shade-4 {

  border-color: var(--shade-4);

  color: var(--shade-4);

}



------



// src/stories/Atoms/Badge/Badge.jsx
import React from 'react';
import PropTypes from 'prop-types';
import './Badge.css';

export const Badge = ({
  label,
  variant = 'primary',
  size = 'normal',
  color,
  round = false,
}) => {
  const variantClass = `badge--${variant}`;
  const sizeClass = size !== 'normal' ? `badge--${size}` : '';
  const colorClass = color ? `${color}` : ''; // Ensure color class matches CSS
  const roundClass = round ? 'badge--round' : '';

  return (
    <span className={`badge ${variantClass} ${sizeClass} ${colorClass} ${roundClass}`}>
      {label}
    </span>
  );
};

Badge.propTypes = {
  label: PropTypes.string.isRequired,
  variant: PropTypes.oneOf(['primary', 'secondary']),
  size: PropTypes.oneOf(['small', 'normal', 'large']),
  color: PropTypes.oneOf([
    'info',
    'warning',
    'alert',
    'success',
    'neutral',
    'dark',
    'classy-color-1',
    'classy-color-2',
    'classy-color-3',
    'classy-color-4',
    'classy-color-5',
    'small-switch-color-1',
    'small-switch-color-2',
    'natural-color-1',
    'natural-color-2',
    'natural-color-3',
    'grey-friend-1',
    'grey-friend-2',
    'shade-1',
    'shade-2',
    'shade-3',
    'shade-4',
  ]), // Updated to oneOf with specific options
  round: PropTypes.bool,
};


----
import React from 'react';
import { Badge } from './Badge';
import './Badge.css';

export default {
  title: 'Atoms/Data/Badge',
  component: Badge,
  argTypes: {
    label: { control: 'text', defaultValue: 'Badge' },
    variant: {
      control: { type: 'select', options: ['primary', 'secondary'] },
      description: 'Badge variant (primary or secondary)',
    },
    size: {
      control: { type: 'select', options: ['small', 'normal', 'large'] },
      description: 'Badge size',
    },
    round: {
      control: 'boolean',
      description: 'Make the badge round',
    },
    color: {
      control: {
        type: 'select',
        options: [
          'info', 'warning', 'alert', 'success', 'neutral', 'dark',
          'classy-color-1', 'classy-color-2', 'classy-color-3', 'classy-color-4', 'classy-color-5',
          'small-switch-color-1', 'small-switch-color-2',
          'natural-color-1', 'natural-color-2', 'natural-color-3',
          'grey-friend-1', 'grey-friend-2',
          'shade-1', 'shade-2', 'shade-3', 'shade-4',
        ],
      },
      description: 'Badge color',
    },
  },
};

// Primary Colored Badges
export const PrimaryColoredBadges = () => (
  <>
    <h3>Primary Colored Badges</h3>
    {[
      'info', 'warning', 'alert', 'success', 'neutral', 'dark',
      'classy-color-1', 'classy-color-2', 'classy-color-3', 'classy-color-4', 'classy-color-5',
      'small-switch-color-1', 'small-switch-color-2',
      'natural-color-1', 'natural-color-2', 'natural-color-3',
      'grey-friend-1', 'grey-friend-2',
      'shade-1', 'shade-2', 'shade-3', 'shade-4',
    ].map((color) => (
      <Badge key={color} label={`${color} Badge`} variant="primary" color={color} />
    ))}
  </>
);

// Secondary Colored Badges
export const SecondaryColoredBadges = () => (
  <>
    <h3>Secondary Colored Badges</h3>
    {[
      'info', 'warning', 'alert', 'success', 'neutral', 'dark',
      'classy-color-1', 'classy-color-2', 'classy-color-3', 'classy-color-4', 'classy-color-5',
      'small-switch-color-1', 'small-switch-color-2',
      'natural-color-1', 'natural-color-2', 'natural-color-3',
      'grey-friend-1', 'grey-friend-2',
      'shade-1', 'shade-2', 'shade-3', 'shade-4',
    ].map((color) => (
      <Badge key={color} label={`${color} Badge`} variant="secondary" color={color} />
    ))}
  </>
);

// Primary Rounded Colored Badges
export const PrimaryRoundedBadges = () => (
  <>
    <h3>Primary Rounded Badges</h3>
    {[
      'info', 'warning', 'alert', 'success', 'neutral', 'dark',
      'classy-color-1', 'classy-color-2', 'classy-color-3', 'classy-color-4', 'classy-color-5',
      'small-switch-color-1', 'small-switch-color-2',
      'natural-color-1', 'natural-color-2', 'natural-color-3',
      'grey-friend-1', 'grey-friend-2',
      'shade-1', 'shade-2', 'shade-3', 'shade-4',
    ].map((color) => (
      <Badge key={color} label={`9`} variant="primary" color={color} round />
    ))}
  </>
);

// Secondary Rounded Colored Badges
export const SecondaryRoundedBadges = () => (
  <>
    <h3>Secondary Rounded Badges</h3>
    {[
      'info', 'warning', 'alert', 'success', 'neutral', 'dark',
      'classy-color-1', 'classy-color-2', 'classy-color-3', 'classy-color-4', 'classy-color-5',
      'small-switch-color-1', 'small-switch-color-2',
      'natural-color-1', 'natural-color-2', 'natural-color-3',
      'grey-friend-1', 'grey-friend-2',
      'shade-1', 'shade-2', 'shade-3', 'shade-4',
    ].map((color) => (
      <Badge key={color} label={`8`} variant="secondary" color={color} round />
    ))}
  </>
);

/**
 * Interactive Badge story
 */
const Template = (args) => <Badge {...args} />;

export const InteractiveBadge = Template.bind({});
InteractiveBadge.args = {
  label: 'Interactive Badge',
  variant: 'primary',
  size: 'normal',
  round: false,
  color: 'info',
};
InteractiveBadge.storyName = 'Interactive Badge';

----

/* src/stories/Atoms/Button/Button.css */

/* Base styles */
.button {
  display: inline-block;
  padding: var(--button-padding);
  border-radius: var(--border-radius);
  font-family: var(--font-family);
  font-size: var(--button-font-size);
  cursor: pointer;
  transition: background-color var(--transition-speed), color var(--transition-speed), border-color var(--transition-speed);
  text-align: center;
  border: 1px solid transparent;
  box-shadow: var(--box-shadow);
  margin-right: 10px;
  background-color: var(--button-bg-color, transparent);
  color: var(--button-text-color, var(--text-color));
  border-color: var(--button-border-color, transparent);
}

/* Hover Effects */
.button:hover {
  background-color: var(--button-bg-hover-color, var(--button-bg-color));
  color: var(--button-text-hover-color, var(--button-text-color));
  border-color: var(--button-border-hover-color, var(--button-border-color));
}

/* Primary Variant */
.button--primary {
  --button-bg-color: var(--primary-color);
  --button-text-color: var(--text-color-inverse);
  --button-border-color: var(--primary-color);
  --button-bg-hover-color: var(--primary-color-hover);
}

/* Secondary Variant */
.button--secondary {
  --button-bg-color: transparent;
  --button-text-color: var(--secondary-color);
  --button-border-color: var(--secondary-border-color);
  --button-text-hover-color: var(--primary-color-hover);
  --button-border-hover-color: var(--primary-color);
}

/* Semantic Color Modifiers */

/* For Primary Variant: Set background colors based on semantic colors */
.button--primary.button--info {
  --button-bg-color: var(--info-color);
  --button-border-color: var(--info-color);
  --button-bg-hover-color: var(--info-color-hover);
}

.button--primary.button--warning {
  --button-bg-color: var(--warning-color);
  --button-border-color: var(--warning-color);
  --button-bg-hover-color: var(--warning-color-hover);
}

.button--primary.button--alert {
  --button-bg-color: var(--alert-color);
  --button-border-color: var(--alert-color);
  --button-bg-hover-color: var(--alert-color-hover);
  --button-text-color: #2C2C2C; /* Dark text for better readability */
}

.button--primary.button--success {
  --button-bg-color: var(--success-color);
  --button-border-color: var(--success-color);
  --button-bg-hover-color: var(--success-color-hover);
}

.button--primary.button--neutral {
  --button-bg-color: var(--neutral-color);
  --button-border-color: var(--neutral-color);
  --button-bg-hover-color: var(--neutral-color-hover);
}

.button--primary.button--dark {
  --button-bg-color: var(--dark-color);
  --button-border-color: var(--dark-color);
  --button-bg-hover-color: var(--dark-color-hover);
}

/* For Secondary Variant: Set text and border colors based on semantic colors */
.button--secondary.button--info {
  --button-text-color: var(--info-color);
  --button-border-color: var(--info-color);
  --button-text-hover-color: var(--info-color-hover);
  --button-border-hover-color: var(--info-color-hover);
}

.button--secondary.button--warning {
  --button-text-color: var(--warning-color);
  --button-border-color: var(--warning-color);
  --button-text-hover-color: var(--warning-color-hover);
  --button-border-hover-color: var(--warning-color-hover);
}

.button--secondary.button--alert {
  --button-text-color: var(--alert-color);
  --button-border-color: var(--alert-color);
  --button-text-hover-color: var(--alert-color-hover);
  --button-border-hover-color: var(--alert-color-hover);
}

.button--secondary.button--success {
  --button-text-color: var(--success-color);
  --button-border-color: var(--success-color);
  --button-text-hover-color: var(--success-color-hover);
  --button-border-hover-color: var(--success-color-hover);
}

.button--secondary.button--neutral {
  --button-text-color: var(--neutral-color);
  --button-border-color: var(--neutral-color);
  --button-text-hover-color: var(--neutral-color-hover);
  --button-border-hover-color: var(--neutral-color-hover);
}

.button--secondary.button--dark {
  --button-text-color: var(--dark-color);
  --button-border-color: var(--dark-color);
  --button-text-hover-color: var(--dark-color-hover);
  --button-border-hover-color: var(--dark-color-hover);
}

/* No Border Modifier */
.button--no-border {
  border: none;
}

----

// src/stories/Atoms/Button/Button.jsx
import React from 'react';
import PropTypes from 'prop-types';
import './Button.css'; // Ensure styles are imported

export const Button = ({
  variant = 'primary', // 'primary', 'secondary'
  color, // 'info', 'warning', 'alert', 'success', 'neutral', 'dark'
  size = 'medium',
  label = '',
  noBorder = false,
  children,
  className = '',
  style = {},
  ...props
}) => {
  const variantClass = `button--${variant}`;
  const colorClass = color ? `button--${color}` : '';
  const sizeClass = `button--${size}`;
  const borderClass = noBorder ? 'button--no-border' : '';

  const combinedClassName = `button ${variantClass} ${colorClass} ${sizeClass} ${borderClass} ${className}`.trim();

  return (
    <button type="button" className={combinedClassName} style={style} {...props}>
      {children || label}
    </button>
  );
};

Button.propTypes = {
  variant: PropTypes.oneOf(['primary', 'secondary']),
  color: PropTypes.oneOf([
    'info',
    'warning',
    'alert',
    'success',
    'neutral',
    'dark',
  ]),
  size: PropTypes.oneOf(['small', 'medium', 'large']),
  label: PropTypes.string,
  noBorder: PropTypes.bool,
  children: PropTypes.node,
  className: PropTypes.string,
  style: PropTypes.object,
};

----

// src/stories/Atoms/Button/Button.stories.jsx
import React from 'react';
import { Button } from './Button';
import './Button.css'; // Ensure styles are imported

export default {
  title: 'Atoms/Interactive/Button',
  component: Button,
  argTypes: {
    variant: {
      control: {
        type: 'select',
        options: ['primary', 'secondary'],
      },
      description: 'Variant of the button.',
      table: {
        type: { summary: 'primary | secondary' },
        defaultValue: { summary: 'primary' },
      },
    },
    color: {
      control: {
        type: 'select',
        options: [
          'info',
          'warning',
          'alert',
          'success',
          'neutral',
          'dark',
        ],
      },
      description: 'Semantic color accent of the button.',
      table: {
        type: { summary: `'info' | 'warning' | 'alert' | 'success' | 'neutral' | 'dark'` },
      },
    },
    size: {
      control: {
        type: 'select',
        options: ['small', 'medium', 'large'],
      },
      description: 'Size of the button.',
      table: {
        type: { summary: 'small | medium | large' },
        defaultValue: { summary: 'medium' },
      },
    },
    label: {
      control: 'text',
      description: 'Text label of the button.',
      table: {
        type: { summary: 'string' },
      },
    },
    noBorder: {
      control: 'boolean',
      description: 'Removes the border if set to true.',
      table: {
        type: { summary: 'boolean' },
        defaultValue: { summary: false },
      },
    },
    onClick: {
      action: 'clicked',
      description: 'Button click handler.',
      table: {
        type: { summary: 'function' },
      },
    },
    children: {
      control: 'text',
      description: 'Button children elements.',
      table: {
        type: { summary: 'node' },
      },
    },
    className: {
      control: 'text',
      description: 'Additional CSS classes.',
      table: {
        type: { summary: 'string' },
      },
    },
    style: {
      control: 'object',
      description: 'Inline styles.',
      table: {
        type: { summary: 'object' },
      },
    },
  },
};

/**
 * 
 * Shows the default primary and secondary buttons without any semantic color accent.
 */
export const DefaultButtons = () => (
  <div style={{ display: 'flex', gap: '10px', flexWrap: 'wrap' }}>
    <Button variant="primary" size="medium">
      Primary Default
    </Button>
    <Button variant="secondary" size="medium">
      Secondary Default
    </Button>
    <Button variant="primary" size="medium" noBorder>
      Primary No Border
    </Button>
    <Button variant="secondary" size="medium" noBorder>
      Secondary No Border
    </Button>
  </div>
);

/**
 * 
 * Demonstrates primary buttons with all semantic colors and sizes.
 */
export const PrimaryButtons = () => (
  <div style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>
    <h3>Primary Buttons</h3>
    {['info', 'warning', 'alert', 'success', 'neutral', 'dark'].map((color) => (
      <div key={color} style={{ display: 'flex', gap: '10px', alignItems: 'center', flexWrap: 'wrap' }}>
        <Button variant="primary" color={color} size="small">
          Primary {color} Small
        </Button>
        <Button variant="primary" color={color} size="medium">
          Primary {color} Medium
        </Button>
        <Button variant="primary" color={color} size="large">
          Primary {color} Large
        </Button>
        <Button variant="primary" color={color} size="medium" noBorder>
          Primary {color} No Border
        </Button>
      </div>
    ))}
  </div>
);

/**
 * 
 * Demonstrates secondary buttons with all semantic colors and sizes.
 */
export const SecondaryButtons = () => (
  <div style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>
    <h3>Secondary Buttons</h3>
    {['info', 'warning', 'alert', 'success', 'neutral', 'dark'].map((color) => (
      <div key={color} style={{ display: 'flex', gap: '10px', alignItems: 'center', flexWrap: 'wrap' }}>
        <Button variant="secondary" color={color} size="small">
          Secondary {color} Small
        </Button>
        <Button variant="secondary" color={color} size="medium">
          Secondary {color} Medium
        </Button>
        <Button variant="secondary" color={color} size="large">
          Secondary {color} Large
        </Button>
        <Button variant="secondary" color={color} size="medium" noBorder>
          Secondary {color} No Border
        </Button>
      </div>
    ))}
  </div>
);

/**
 * ### Interactive Playground
 * 
 * Allows dynamic interaction with the button props via Storybook controls.
 */
const Template = (args) => <Button {...args} />;

export const Playground = Template.bind({});
Playground.args = {
  variant: 'primary',
  color: 'info',
  size: 'medium',
  label: 'Click Me',
  noBorder: false,
  children: 'Click Me',
};
Playground.storyName = 'Interactive Playground';

----

/* src/stories/Atoms/Caption/Caption.css */

/* Base Caption Styles */
.caption {
  font-family: var(--font-family);
  font-size: var(--font-size-small, 14px);
  color: var(--text-color);
  margin-top: var(--spacing-xs, 4px);
  margin-bottom: var(--spacing-md, 16px);
  display: block;
}

/* Size Variants */
/* Size Variants */
.caption--small {
  font-size: var(--font-size-small);
}

.caption--large {
  font-size: var(--font-size-large);
}

/* Type Variants */

/* 1. Image or Video Captions */
.caption--image {
  font-style: italic;
  text-align: center;
}

/* 2. Table Captions */
.caption--table {
  caption-side: top; /* Ensures the caption appears above the table */
  font-weight: var(--font-weight-medium, 500);
}

/* 3. Form Element Captions */
.caption--form {
  font-size: var(--font-size-small, 14px);
  color: var(--text-color);
  margin-top: var(--spacing-xs, 4px);
}

/* 4. Chart or Graph Captions */
.caption--chart {
  font-weight: var(--font-weight-bold, 600);
  margin-top: var(--spacing-sm, 8px);
}

/* 5. Audio or Video Transcriptions (Subtitles or Captions) */
.caption--transcription {
  font-size: var(--font-size-small, 14px);
  color: var(--text-color);
  background-color: rgba(0, 0, 0, 0.6);
  color: #ffffff;
  padding: var(--spacing-xs, 4px) var(--spacing-sm, 8px);
  border-radius: var(--border-radius, 4px);
  position: absolute;
  bottom: var(--spacing-xs, 4px);
  left: 50%;
  transform: translateX(-50%);
  max-width: 90%;
  text-align: center;
}

/* 6. Content Descriptions or Explanations */
.caption--description {
  font-size: var(--font-size-small, 14px);
  color: var(--text-color);
  margin-top: var(--spacing-xs, 4px);
}

/* 7. Captions for Interactive Elements */
.caption--interactive {
  font-size: var(--font-size-small, 14px);
  color: var(--text-color);
  display: flex;
  align-items: center;
  gap: var(--spacing-xs, 4px);
}

/* Color Classes */
.caption--info {
  color: var(--info-color);
}

.caption--warning {
  color: var(--warning-color);
}

.caption--alert {
  color: var(--alert-color);
}

.caption--success {
  color: var(--success-color);
}

.caption--neutral {
  color: var(--neutral-color);
}

.caption--dark {
  color: var(--dark-color);
}

.caption--classy-color-1 {
  color: var(--classy-color-1);
}

.caption--classy-color-2 {
  color: var(--classy-color-2);
}

.caption--classy-color-3 {
  color: var(--classy-color-3);
}

.caption--classy-color-4 {
  color: var(--classy-color-4);
}

.caption--classy-color-5 {
  color: var(--classy-color-5);
}

.caption--small-switch-color-1 {
  color: var(--small-switch-color-1);
}

.caption--small-switch-color-2 {
  color: var(--small-switch-color-2);
}

.caption--natural-color-1 {
  color: var(--natural-color-1);
}

.caption--natural-color-2 {
  color: var(--natural-color-2);
}

.caption--natural-color-3 {
  color: var(--natural-color-3);
}

.caption--grey-friend-1 {
  color: var(--grey-friend-1);
}

.caption--grey-friend-2 {
  color: var(--grey-friend-2);
}

.caption--shade-1 {
  color: var(--shade-1);
}

.caption--shade-2 {
  color: var(--shade-2);
}

.caption--shade-3 {
  color: var(--shade-3);
}

.caption--shade-4 {
  color: var(--shade-4);
}

----

// src/stories/Atoms/Caption/Caption.jsx
import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import './Caption.css';

export const Caption = ({
  text,
  variant = 'image', // 'image', 'table', 'form', 'chart', 'transcription', 'description', 'interactive'
  size = 'normal', // 'small', 'normal', 'large'
  color,
  className = '',
  style = {},
}) => {
  const captionClasses = classNames('caption', {
    [`caption--${variant}`]: variant,
    [`caption--${size}`]: size !== 'normal',
    [`caption--${color}`]: color, // Apply color class if provided
  }, className);

  return (
    <span className={captionClasses} style={style}>
      {text}
    </span>
  );
};

Caption.propTypes = {
  /** Text content of the caption */
  text: PropTypes.string.isRequired,
  /** Variant/type of the caption */
  variant: PropTypes.oneOf([
    'image',
    'table',
    'form',
    'chart',
    'transcription',
    'description',
    'interactive',
  ]),
  /** Size of the caption */
  size: PropTypes.oneOf(['small', 'normal', 'large']),
  /** Color of the caption (matches global theme colors) */
  color: PropTypes.oneOf([
    'info',
    'warning',
    'alert',
    'success',
    'neutral',
    'dark',
    'classy-color-1',
    'classy-color-2',
    'classy-color-3',
    'classy-color-4',
    'classy-color-5',
    'small-switch-color-1',
    'small-switch-color-2',
    'natural-color-1',
    'natural-color-2',
    'natural-color-3',
    'grey-friend-1',
    'grey-friend-2',
    'shade-1',
    'shade-2',
    'shade-3',
    'shade-4',
  ]),
  /** Additional CSS classes */
  className: PropTypes.string,
  /** Inline styles */
  style: PropTypes.object,
};

----

// src/stories/Atoms/Caption/Caption.stories.jsx
import React from 'react';
import { Caption } from './Caption';
import './Caption.css';

export default {
  title: 'Atoms/Text/Caption',
  component: Caption,
  argTypes: {
    text: {
      control: 'text',
      description: 'Text content of the caption.',
      table: {
        type: { summary: 'string' },
        defaultValue: { summary: 'required' },
      },
    },
    variant: {
      control: {
        type: 'select',
        options: [
          'image',
          'table',
          'form',
          'chart',
          'transcription',
          'description',
          'interactive',
        ],
      },
      description: 'Variant/type of the caption.',
      table: {
        type: { summary: `'image' | 'table' | 'form' | 'chart' | 'transcription' | 'description' | 'interactive'` },
        defaultValue: { summary: 'image' },
      },
    },
    size: {
      control: {
        type: 'select',
        options: ['small', 'normal', 'large'],
      },
      description: 'Size of the caption.',
      table: {
        type: { summary: `'small' | 'normal' | 'large'` },
        defaultValue: { summary: 'normal' },
      },
    },
    color: {
      control: {
        type: 'select',
        options: [
          'info',
          'warning',
          'alert',
          'success',
          'neutral',
          'dark',
          'classy-color-1',
          'classy-color-2',
          'classy-color-3',
          'classy-color-4',
          'classy-color-5',
          'small-switch-color-1',
          'small-switch-color-2',
          'natural-color-1',
          'natural-color-2',
          'natural-color-3',
          'grey-friend-1',
          'grey-friend-2',
          'shade-1',
          'shade-2',
          'shade-3',
          'shade-4',
        ],
      },
      description: 'Color of the caption (matches global theme colors).',
      table: {
        type: { summary: `'info' | 'warning' | 'alert' | 'success' | 'neutral' | 'dark' | 'classy-color-1' | 'classy-color-2' | 'classy-color-3' | 'classy-color-4' | 'classy-color-5' | 'small-switch-color-1' | 'small-switch-color-2' | 'natural-color-1' | 'natural-color-2' | 'natural-color-3' | 'grey-friend-1' | 'grey-friend-2' | 'shade-1' | 'shade-2' | 'shade-3' | 'shade-4'` },
      },
    },
    className: {
      control: 'text',
      description: 'Additional CSS classes.',
      table: {
        type: { summary: 'string' },
      },
    },
    style: {
      control: 'object',
      description: 'Inline styles.',
      table: {
        type: { summary: 'object' },
      },
    },
  },
};

/**
 * Image or Video Captions
 */
export const ImageCaption = () => (
  <figure style={{ textAlign: 'center' }}>
    <img src="https://via.placeholder.com/150" alt="Sample Image" />
    <Caption text="CEO delivering the keynote at the annual conference." variant="image" />
  </figure>
);

/**
 * Table Captions
 */
export const TableCaption = () => (
  <figure>
    <table>
      <caption>Quarterly financial results for Q3 2024</caption>
      <thead>
        <tr>
          <th>Revenue</th>
          <th>Expenses</th>
          <th>Profit</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>$1,000,000</td>
          <td>$750,000</td>
          <td>$250,000</td>
        </tr>
      </tbody>
    </table>
    {/* Alternatively, using Caption component */}
    {/* <Caption text="Quarterly financial results for Q3 2024" variant="table" /> */}
  </figure>
);

/**
 * Form Element Captions
 */
export const FormCaption = () => (
  <div>
    <label htmlFor="meeting-date">Meeting Date</label>
    <input type="date" id="meeting-date" name="meeting-date" />
    <Caption text="Select your preferred meeting date." variant="form" />
  </div>
);

/**
 * Chart or Graph Captions
 */
export const ChartCaption = () => (
  <div style={{ position: 'relative' }}>
    <img src="https://via.placeholder.com/300x200" alt="Sample Chart" />
    <Caption text="Annual growth rate comparison between 2020 and 2024." variant="chart" />
  </div>
);

/**
 * Audio or Video Transcriptions (Subtitles or Captions)
 */
export const TranscriptionCaption = () => (
  <div style={{ position: 'relative', display: 'inline-block' }}>
    <video width="300" controls>
      <source src="https://www.w3schools.com/html/mov_bbb.mp4" type="video/mp4" />
      Your browser does not support the video tag.
    </video>
    <Caption
      text="[Music playing in the background]."
      variant="transcription"
      size="small"
      color="neutral"
      style={{ position: 'absolute', bottom: '10px', left: '50%' }}
    />
  </div>
);

/**
 * Content Descriptions or Explanations
 */
export const DescriptionCaption = () => (
  <div>
    <img src="https://via.placeholder.com/300x200" alt="Sample Data" />
    <Caption text="Data collected from a sample size of 1000 users." variant="description" />
  </div>
);

/**
 * Captions for Elements
 */
export const ElementCaption = () => (
  <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
    <button>🔊</button>
    <Caption text="Adjust volume level." variant="interactive" />
  </div>
);

/**
 * Interactive Playground
 */
const Template = (args) => <Caption {...args} />;

export const InteractiveCaptionStory = Template.bind({});
InteractiveCaptionStory.args = {
  text: 'Interactive Caption',
  variant: 'image',
  size: 'normal',
  color: 'info',
};
InteractiveCaptionStory.storyName = 'Interactive Caption';


----

/* src/stories/Atoms/Checkbox/Checkbox.css */

/* Base Checkbox Styles */
.checkbox {
  position: relative;
  display: inline-flex;
  align-items: center;
  cursor: pointer;
  font-family: var(--font-family);
  font-size: var(--font-size-base); /* Inherit base font size */
  color: var(--text-color);
  user-select: none;
}

/* Disabled State */
.checkbox--disabled {
  cursor: not-allowed;
  opacity: 0.6;
}

/* Hidden Checkbox Input */
.checkbox input {
  opacity: 0;
  position: absolute;
  cursor: pointer;
  height: 0;
  width: 0;
}

/* Custom Checkbox */
.checkbox::before {
  content: '';
  display: inline-block;
  width: 16px;
  height: 16px;
  margin-right: 8px;
  border: 2px solid var(--border-color);
  border-radius: 4px;
  background-color: var(--background-color);
  transition: background-color var(--transition-speed), border-color var(--transition-speed);
}

/* Checked State */
.checkbox input:checked + .checkbox__label::before {
  background-color: var(--primary-color);
  border-color: var(--primary-color);
}

/* Checkmark */
.checkbox input:checked + .checkbox__label::after {
  content: '';
  position: absolute;
  left: 5px;
  top: 1px;
  width: 5px;
  height: 10px;
  border: solid var(--text-color-inverse);
  border-width: 0 2px 2px 0;
  transform: rotate(45deg);
}

/* Variants */
.checkbox--primary::before {
  border-color: var(--primary-color);
}

.checkbox--secondary::before {
  border-color: var(--secondary-color);
}

/* Sizes */
.checkbox--small {
  font-size: var(--font-size-small); /* Inherit small font size */
}

.checkbox--large {
  font-size: var(--font-size-large); /* Inherit large font size */
}

.checkbox--small::before {
  width: 12px;
  height: 12px;
}

.checkbox--large::before {
  width: 20px;
  height: 20px;
}

/* Rounded */
.checkbox--rounded::before {
  border-radius: 50%;
}

/* Color Classes */
.info {
  --primary-color: var(--info-color);
}

.warning {
  --primary-color: var(--warning-color);
}

.alert {
  --primary-color: var(--alert-color);
}

.success {
  --primary-color: var(--success-color);
}

.neutral {
  --primary-color: var(--neutral-color);
}

.dark {
  --primary-color: var(--dark-color);
}

.classy-color-1 {
  --primary-color: var(--classy-color-1);
}

.classy-color-2 {
  --primary-color: var(--classy-color-2);
}

.classy-color-3 {
  --primary-color: var(--classy-color-3);
}

.classy-color-4 {
  --primary-color: var(--classy-color-4);
}

.classy-color-5 {
  --primary-color: var(--classy-color-5);
}

.small-switch-color-1 {
  --primary-color: var(--small-switch-color-1);
}

.small-switch-color-2 {
  --primary-color: var(--small-switch-color-2);
}

.natural-color-1 {
  --primary-color: var(--natural-color-1);
}

.natural-color-2 {
  --primary-color: var(--natural-color-2);
}

.natural-color-3 {
  --primary-color: var(--natural-color-3);
}

.grey-friend-1 {
  --primary-color: var(--grey-friend-1);
}

.grey-friend-2 {
  --primary-color: var(--grey-friend-2);
}

.shade-1 {
  --primary-color: var(--shade-1);
}

.shade-2 {
  --primary-color: var(--shade-2);
}

.shade-3 {
  --primary-color: var(--shade-3);
}

.shade-4 {
  --primary-color: var(--shade-4);
}


---

// src/stories/Atoms/Checkbox/Checkbox.jsx
import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import './Checkbox.css';

export const Checkbox = ({
  label,
  checked = false,
  onChange,
  variant = 'primary',
  size = 'normal',
  color = 'info',
  rounded = false,
  disabled = false,
  className = '',
  ...props
}) => {
  const checkboxClasses = classNames('checkbox', className, {
    [`checkbox--${variant}`]: variant,
    [`checkbox--${size}`]: size !== 'normal',
    [color]: color,
    'checkbox--rounded': rounded,
    'checkbox--disabled': disabled,
  });

  return (
    <label className={checkboxClasses}>
      <input
        type="checkbox"
        checked={checked}
        onChange={onChange}
        disabled={disabled}
        {...props}
      />
      <span className="checkbox__label">{label}</span>
    </label>
  );
};

Checkbox.propTypes = {
  /** Label text for the checkbox */
  label: PropTypes.string.isRequired,
  /** Checked state of the checkbox */
  checked: PropTypes.bool,
  /** Change handler */
  onChange: PropTypes.func,
  /** Variant of the checkbox */
  variant: PropTypes.oneOf(['primary', 'secondary']),
  /** Size of the checkbox */
  size: PropTypes.oneOf(['small', 'normal', 'large']),
  /** Color from the global palette */
  color: PropTypes.oneOf([
    'info',
    'warning',
    'alert',
    'success',
    'neutral',
    'dark',
    'classy-color-1',
    'classy-color-2',
    'classy-color-3',
    'classy-color-4',
    'classy-color-5',
    'small-switch-color-1',
    'small-switch-color-2',
    'natural-color-1',
    'natural-color-2',
    'natural-color-3',
    'grey-friend-1',
    'grey-friend-2',
    'shade-1',
    'shade-2',
    'shade-3',
    'shade-4',
  ]),
  /** Rounded or Squared */
  rounded: PropTypes.bool,
  /** Disabled state */
  disabled: PropTypes.bool,
  /** Additional CSS classes */
  className: PropTypes.string,
};


----

// src/stories/Atoms/Checkbox/Checkbox.stories.jsx
import React, { useState } from 'react';
import { Checkbox } from './Checkbox';
import './Checkbox.css';

export default {
  title: 'Atoms/Interactive/Checkbox',
  component: Checkbox,
  argTypes: {
    label: { control: 'text', defaultValue: 'Checkbox Label' },
    variant: {
      control: { type: 'select', options: ['primary', 'secondary'] },
      description: 'Checkbox variant.',
    },
    size: {
      control: { type: 'select', options: ['small', 'normal', 'large'] },
      description: 'Checkbox size.',
    },
    color: {
      control: {
        type: 'select',
        options: [
          'info',
          'warning',
          'alert',
          'success',
          'neutral',
          'dark',
          'classy-color-1',
          'classy-color-2',
          'classy-color-3',
          'classy-color-4',
          'classy-color-5',
          'small-switch-color-1',
          'small-switch-color-2',
          'natural-color-1',
          'natural-color-2',
          'natural-color-3',
          'grey-friend-1',
          'grey-friend-2',
          'shade-1',
          'shade-2',
          'shade-3',
          'shade-4',
        ],
      },
      description: 'Checkbox color.',
    },
    rounded: {
      control: 'boolean',
      description: 'Rounded or squared checkbox.',
    },
    disabled: {
      control: 'boolean',
      description: 'Disable the checkbox.',
    },
  },
};

/**
 * Primary Checkbox - Normal Size - Squared
 */
export const PrimaryNormal = () => (
  <Checkbox label="Primary Normal Checkbox" variant="primary" size="normal" color="info" />
);

/**
 * Secondary Checkbox - Large Size - Rounded
 */
export const SecondaryLargeRounded = () => (
  <Checkbox label="Secondary Large Rounded Checkbox" variant="secondary" size="large" color="warning" rounded />
);

/**
 * Primary Checkbox - Small Size - Rounded
 */
export const PrimarySmallRounded = () => (
  <Checkbox label="Primary Small Rounded Checkbox" variant="primary" size="small" color="success" rounded />
);

/**
 * Secondary Checkbox - Normal Size - Squared
 */
export const SecondaryNormal = () => (
  <Checkbox label="Secondary Normal Checkbox" variant="secondary" size="normal" color="neutral" />
);

/**
 * Interactive Checkbox
 */
const Template = (args) => {
  const [checked, setChecked] = useState(args.checked || false);

  const handleChange = (e) => {
    setChecked(e.target.checked);
    if (args.onChange) args.onChange(e);
  };

  return <Checkbox {...args} checked={checked} onChange={handleChange} />;
};

export const InteractiveCheckbox = Template.bind({});
InteractiveCheckbox.args = {
  label: 'Interactive Checkbox',
  variant: 'primary',
  size: 'normal',
  color: 'info',
  rounded: false,
  disabled: false,
  checked: false,
};
InteractiveCheckbox.storyName = 'Interactive Checkbox';


----
/* src/stories/Atoms/Container/Container.css */

/* Base Container Styles */
.container {
  padding: var(--spacing-md);
  background-color: transparent;
  transition: all var(--transition-speed) ease;
  box-sizing: border-box;
  position: var(--position, static);
}

/* Border Variant */
.container--border {
  border: 1px solid var(--border-color);
}

/* Size Variants */
.container--small {
  width: 25%;
}

.container--medium {
  width: 50%;
}

.container--large {
  width: 75%;
}

/* Fluid Variant */
.container--fluid {
  width: 100%;
}

/* Rounded Corners */
.container--rounded {
  border-radius: var(--border-radius);
}

/* Alignment */
.container--align-left {
  margin-left: 0;
  margin-right: auto;
}

.container--align-center {
  margin-left: auto;
  margin-right: auto;
}

.container--align-right {
  margin-left: auto;
  margin-right: 0;
}

/* Positioning */
.container--position-static {
  position: static;
}

.container--position-relative {
  position: relative;
}

.container--position-absolute {
  position: absolute;
}

.container--position-fixed {
  position: fixed;
}

.container--position-sticky {
  position: sticky;
}

/* Responsive Adjustments */
@media (max-width: 768px) {
  .container--small,
  .container--medium,
  .container--large {
    width: 100%;
    padding: var(--spacing-sm);
  }
  
  .container--fluid {
    padding: var(--spacing-xs);
  }
}

---

// src/stories/Atoms/Container/Container.jsx
import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import './Container.css';

export const Container = ({
  children,
  border = false,
  size = 'medium',
  rounded = false,
  fluid = false,
  align = 'left',
  position = 'static',
  className = '',
  style = {},
  ...props
}) => {
  const containerClasses = classNames('container', className, {
    'container--border': border,
    [`container--${size}`]: size,
    'container--rounded': rounded,
    'container--fluid': fluid,
    [`container--align-${align}`]: align,
    [`container--position-${position}`]: position,
  });

  return (
    <div className={containerClasses} style={style} {...props}>
      {children}
    </div>
  );
};

Container.propTypes = {
  /** Content to be wrapped inside the container */
  children: PropTypes.node.isRequired,
  /** Add a border to the container */
  border: PropTypes.bool,
  /** Size of the container */
  size: PropTypes.oneOf(['small', 'medium', 'large']),
  /** Rounded corners */
  rounded: PropTypes.bool,
  /** Fluid container (full width) */
  fluid: PropTypes.bool,
  /** Text alignment within the container */
  align: PropTypes.oneOf(['left', 'center', 'right']),
  /** CSS position property */
  position: PropTypes.oneOf(['static', 'relative', 'absolute', 'fixed', 'sticky']),
  /** Additional CSS classes */
  className: PropTypes.string,
  /** Inline styles */
  style: PropTypes.object,
};


---

// src/stories/Atoms/Container/Container.stories.jsx
import React from 'react';
import { Container } from './Container';
import './Container.css';

export default {
  title: 'Atoms/Layout/Container',
  component: Container,
  argTypes: {
    border: {
      control: 'boolean',
      description: 'Add a border to the container.',
    },
    size: {
      control: {
        type: 'select',
        options: ['small', 'medium', 'large'],
      },
      description: 'Size of the container.',
    },
    rounded: {
      control: 'boolean',
      description: 'Apply rounded corners to the container.',
    },
    fluid: {
      control: 'boolean',
      description: 'Make the container full-width.',
    },
    align: {
      control: {
        type: 'select',
        options: ['left', 'center', 'right'],
      },
      description: 'Alignment of the container.',
    },
    position: {
      control: {
        type: 'select',
        options: ['static', 'relative', 'absolute', 'fixed', 'sticky'],
      },
      description: 'CSS position property of the container.',
    },
    className: {
      control: 'text',
      description: 'Additional CSS classes.',
    },
    style: {
      control: 'object',
      description: 'Inline styles.',
    },
  },
};

/**
 * Small Container with Border and Left Alignment
 */
export const SmallWithBorderLeft = () => (
  <Container border size="small" align="left">
    <p>This is a small container with a border and left alignment.</p>
  </Container>
);

/**
 * Medium Rounded Container with Center Alignment
 */
export const MediumRoundedCenter = () => (
  <Container rounded size="medium" align="center">
    <p>This is a medium-sized container with rounded corners and center alignment.</p>
  </Container>
);

/**
 * Large Fluid Container with Right Alignment
 */
export const LargeFluidRight = () => (
  <Container fluid size="large" align="right">
    <p>This is a large, fluid container without a border and right alignment.</p>
  </Container>
);

/**
 * Container with Absolute Positioning
 */
export const AbsolutePositioned = () => (
  <Container position="absolute" style={{ top: '20px', left: '20px' }}>
    <p>This container is absolutely positioned.</p>
  </Container>
);

/**
 * Interactive Playground
 */
const Template = (args) => <Container {...args}>This is an interactive container.</Container>;

export const InteractiveContainer = Template.bind({});
InteractiveContainer.args = {
  border: false,
  size: 'medium',
  rounded: false,
  fluid: false,
  align: 'left',
  position: 'static',
};
InteractiveContainer.storyName = 'Interactive Container';


---
/* src/stories/Atoms/Divider/Divider.css */

.divider {
  border: none;
  height: 1px;
  margin: var(--spacing-md) 0;
  background-color: var(--neutral-color);
  transition: background-color var(--transition-speed) ease, height var(--transition-speed) ease;
}

/* Thickness Variants */
.divider--thin {
  height: 1px;
}

.divider--normal {
  height: 2px;
}

.divider--bold {
  height: 3px;
}

/* Width Variants */
.divider--small {
  width: 25%;
}

.divider--medium {
  width: 50%;
}

.divider--large {
  width: 75%;
}

/* Alignment Variants */
.divider--align-left {
  margin-left: 0;
}

.divider--align-center {
  margin-left: auto;
  margin-right: auto;
}

.divider--align-right {
  margin-right: 0;
}

/* Color Classes */
.info {
  background-color: var(--info-color);
}

.warning {
  background-color: var(--warning-color);
}

.alert {
  background-color: var(--alert-color);
}

.success {
  background-color: var(--success-color);
}

.neutral {
  background-color: var(--neutral-color);
}

.dark {
  background-color: var(--dark-color);
}

.classy-color-1 {
  background-color: var(--classy-color-1);
}

.classy-color-2 {
  background-color: var(--classy-color-2);
}

.classy-color-3 {
  background-color: var(--classy-color-3);
}

.classy-color-4 {
  background-color: var(--classy-color-4);
}

.classy-color-5 {
  background-color: var(--classy-color-5);
}

.small-switch-color-1 {
  background-color: var(--small-switch-color-1);
}

.small-switch-color-2 {
  background-color: var(--small-switch-color-2);
}

.natural-color-1 {
  background-color: var(--natural-color-1);
}

.natural-color-2 {
  background-color: var(--natural-color-2);
}

.natural-color-3 {
  background-color: var(--natural-color-3);
}

.grey-friend-1 {
  background-color: var(--grey-friend-1);
}

.grey-friend-2 {
  background-color: var(--grey-friend-2);
}

.shade-1 {
  background-color: var(--shade-1);
}

.shade-2 {
  background-color: var(--shade-2);
}

.shade-3 {
  background-color: var(--shade-3);
}

.shade-4 {
  background-color: var(--shade-4);
}

/* Responsive Adjustments */
@media (max-width: 768px) {
  .divider--small,
  .divider--medium,
  .divider--large {
    width: 100%;
  }
}
---

// src/stories/Atoms/Divider/Divider.jsx
import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import './Divider.css';

export const Divider = ({
  thickness = 'normal',
  width = 'medium',
  align = 'center',
  color = 'neutral',
  className = '',
  style = {},
  ...props
}) => {
  const dividerClasses = classNames('divider', className, {
    [`divider--${thickness}`]: thickness,
    [`divider--${width}`]: width,
    [`divider--align-${align}`]: align,
    [color]: color,
  });

  return <hr className={dividerClasses} style={style} {...props} />;
};

Divider.propTypes = {
  /** Thickness of the divider */
  thickness: PropTypes.oneOf(['thin', 'normal', 'bold']),
  /** Width of the divider */
  width: PropTypes.oneOf(['small', 'medium', 'large']),
  /** Alignment of the divider */
  align: PropTypes.oneOf(['left', 'center', 'right']),
  /** Color of the divider */
  color: PropTypes.oneOf([
    'info',
    'warning',
    'alert',
    'success',
    'neutral',
    'dark',
    'classy-color-1',
    'classy-color-2',
    'classy-color-3',
    'classy-color-4',
    'classy-color-5',
    'small-switch-color-1',
    'small-switch-color-2',
    'natural-color-1',
    'natural-color-2',
    'natural-color-3',
    'grey-friend-1',
    'grey-friend-2',
    'shade-1',
    'shade-2',
    'shade-3',
    'shade-4',
  ]),
  /** Additional CSS classes */
  className: PropTypes.string,
  /** Inline styles */
  style: PropTypes.object,
};
---

// src/stories/Atoms/Divider/Divider.stories.jsx
import React from 'react';
import { Divider } from './Divider';
import './Divider.css';

export default {
  title: 'Atoms/Layout/Divider',
  component: Divider,
  argTypes: {
    thickness: {
      control: {
        type: 'select',
        options: ['thin', 'normal', 'bold'],
      },
      description: 'Thickness of the divider.',
    },
    width: {
      control: {
        type: 'select',
        options: ['small', 'medium', 'large'],
      },
      description: 'Width of the divider.',
    },
    align: {
      control: {
        type: 'select',
        options: ['left', 'center', 'right'],
      },
      description: 'Alignment of the divider.',
    },
    color: {
      control: {
        type: 'select',
        options: [
          'info',
          'warning',
          'alert',
          'success',
          'neutral',
          'dark',
          'classy-color-1',
          'classy-color-2',
          'classy-color-3',
          'classy-color-4',
          'classy-color-5',
          'small-switch-color-1',
          'small-switch-color-2',
          'natural-color-1',
          'natural-color-2',
          'natural-color-3',
          'grey-friend-1',
          'grey-friend-2',
          'shade-1',
          'shade-2',
          'shade-3',
          'shade-4',
        ],
      },
      description: 'Color of the divider.',
    },
    className: {
      control: 'text',
      description: 'Additional CSS classes.',
    },
    style: {
      control: 'object',
      description: 'Inline styles.',
    },
  },
};

/**
 * Thin Small Left Aligned Divider
 */
export const ThinSmallLeft = () => (
  <Divider thickness="thin" width="small" align="left" color="info" />
);

/**
 * Normal Medium Center Aligned Divider
 */
export const NormalMediumCenter = () => (
  <Divider thickness="normal" width="medium" align="center" color="warning" />
);

/**
 * Bold Large Right Aligned Divider
 */
export const BoldLargeRight = () => (
  <Divider thickness="bold" width="large" align="right" color="success" />
);

/**
 * Interactive Divider
 */
const Template = (args) => <Divider {...args} />;

export const InteractiveDivider = Template.bind({});
InteractiveDivider.args = {
  thickness: 'normal',
  width: 'medium',
  align: 'center',
  color: 'neutral',
};
InteractiveDivider.storyName = 'Interactive Divider';


----

/* src/stories/Atoms/Heading/Heading.css */

.heading {
  font-family: var(--font-family);
  color: var(--text-color);
  margin-bottom: var(--spacing-md);
  transition: color var(--transition-speed) ease;
}

.heading--align-left {
  text-align: left;
}

.heading--align-center {
  text-align: center;
}

.heading--align-right {
  text-align: right;
}

.heading--bold {
  font-weight: var(--font-weight-heavy);
}

.heading--info {
  color: var(--info-color);
}

.heading--warning {
  color: var(--warning-color);
}

.heading--alert {
  color: var(--alert-color);
}

.heading--success {
  color: var(--success-color);
}

.heading--neutral {
  color: var(--neutral-color);
}

.heading--dark {
  color: var(--dark-color);
}

.heading--classy-color-1 {
  color: var(--classy-color-1);
}

.heading--classy-color-2 {
  color: var(--classy-color-2);
}

.heading--classy-color-3 {
  color: var(--classy-color-3);
}

.heading--classy-color-4 {
  color: var(--classy-color-4);
}

.heading--classy-color-5 {
  color: var(--classy-color-5);
}

.heading--small-switch-color-1 {
  color: var(--small-switch-color-1);
}

.heading--small-switch-color-2 {
  color: var(--small-switch-color-2);
}

.heading--natural-color-1 {
  color: var(--natural-color-1);
}

.heading--natural-color-2 {
  color: var(--natural-color-2);
}

.heading--natural-color-3 {
  color: var(--natural-color-3);
}

.heading--grey-friend-1 {
  color: var(--grey-friend-1);
}

.heading--grey-friend-2 {
  color: var(--grey-friend-2);
}

.heading--shade-1 {
  color: var(--shade-1);
}

.heading--shade-2 {
  color: var(--shade-2);
}

.heading--shade-3 {
  color: var(--shade-3);
}

.heading--shade-4 {
  color: var(--shade-4);
}

----

// src/stories/Atoms/Heading/Heading.jsx
import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import './Heading.css';

export const Heading = ({
  level = 1, // 1 to 5
  align = 'left', // 'left', 'center', 'right'
  bold = false,
  color = 'neutral',
  children,
  className = '',
  style = {},
  ...props
}) => {
  const Tag = `h${level}`;
  const headingClasses = classNames('heading', className, {
    [`heading--align-${align}`]: align,
    'heading--bold': bold,
    [`heading--${color}`]: color,
  });

  return (
    <Tag className={headingClasses} style={style} {...props}>
      {children}
    </Tag>
  );
};

Heading.propTypes = {
  /** Heading level (1 to 5) */
  level: PropTypes.oneOf([1, 2, 3, 4, 5]),
  /** Text alignment */
  align: PropTypes.oneOf(['left', 'center', 'right']),
  /** Bold text */
  bold: PropTypes.bool,
  /** Color of the heading text */
  color: PropTypes.oneOf([
    'info',
    'warning',
    'alert',
    'success',
    'neutral',
    'dark',
    'classy-color-1',
    'classy-color-2',
    'classy-color-3',
    'classy-color-4',
    'classy-color-5',
    'small-switch-color-1',
    'small-switch-color-2',
    'natural-color-1',
    'natural-color-2',
    'natural-color-3',
    'grey-friend-1',
    'grey-friend-2',
    'shade-1',
    'shade-2',
    'shade-3',
    'shade-4',
  ]),
  /** Content of the heading */
  children: PropTypes.node.isRequired,
  /** Additional CSS classes */
  className: PropTypes.string,
  /** Inline styles */
  style: PropTypes.object,
};

-----

// src/stories/Atoms/Heading/Heading.stories.jsx
import React from 'react';
import { Heading } from './Heading';
import './Heading.css';

export default {
  title: 'Atoms/Text/Heading',
  component: Heading,
  argTypes: {
    level: {
      control: {
        type: 'select',
        options: [1, 2, 3, 4, 5],
      },
      description: 'Heading level (1 to 5).',
    },
    align: {
      control: {
        type: 'select',
        options: ['left', 'center', 'right'],
      },
      description: 'Text alignment.',
    },
    bold: {
      control: 'boolean',
      description: 'Make the text bold.',
    },
    color: {
      control: {
        type: 'select',
        options: [
          'info',
          'warning',
          'alert',
          'success',
          'neutral',
          'dark',
          'classy-color-1',
          'classy-color-2',
          'classy-color-3',
          'classy-color-4',
          'classy-color-5',
          'small-switch-color-1',
          'small-switch-color-2',
          'natural-color-1',
          'natural-color-2',
          'natural-color-3',
          'grey-friend-1',
          'grey-friend-2',
          'shade-1',
          'shade-2',
          'shade-3',
          'shade-4',
        ],
      },
      description: 'Color of the heading text.',
    },
    className: {
      control: 'text',
      description: 'Additional CSS classes.',
    },
    style: {
      control: 'object',
      description: 'Inline styles.',
    },
    children: {
      control: 'text',
      description: 'Content of the heading.',
    },
  },
};

/**
 * H1 Center Aligned Bold Heading
 */
export const H1CenterBold = () => (
  <Heading level={1} align="center" bold color="success">
    This is a Center Aligned Bold H1 Heading
  </Heading>
);

/**
 * H2 Left Aligned Normal Heading
 */
export const H2LeftNormal = () => (
  <Heading level={2} align="left" color="info">
    This is a Left Aligned Normal H2 Heading
  </Heading>
);

/**
 * H3 Right Aligned Bold Heading
 */
export const H3RightBold = () => (
  <Heading level={3} align="right" bold color="warning">
    This is a Right Aligned Bold H3 Heading
  </Heading>
);

/**
 * H4 Center Aligned Normal Heading
 */
export const H4CenterNormal = () => (
  <Heading level={4} align="center" color="neutral">
    This is a Center Aligned Normal H4 Heading
  </Heading>
);

/**
 * H5 Left Aligned Bold Heading
 */
export const H5LeftBold = () => (
  <Heading level={5} align="left" bold color="dark">
    This is a Left Aligned Bold H5 Heading
  </Heading>
);

/**
 * Interactive Heading
 */
const Template = (args) => <Heading {...args}>This is an interactive heading.</Heading>;

export const InteractiveHeading = Template.bind({});
InteractiveHeading.args = {
  level: 3,
  align: 'center',
  bold: false,
  color: 'info',
};
InteractiveHeading.storyName = 'Interactive Heading';

----
/* src/stories/Atoms/Icon/Icon.css */

.icon-container {
  display: inline-flex;
  align-items: center;
  justify-content: center;
}

.icon-container--background {
  background-color: var(--color-var);
}

.icon-container--shape-rounded {
  border-radius: 50%;
}

.icon-container--shape-square {
  border-radius: 0;
}

.icon-container--size-small {
  width: var(--font-size-small);
  height: var(--font-size-small);
}

.icon-container--size-normal {
  width: var(--font-size-base);
  height: var(--font-size-base);
}

.icon-container--size-big {
  width: var(--font-size-large);
  height: var(--font-size-large);
}

.icon-container--align-left {
  justify-content: flex-start;
}

.icon-container--align-center {
  justify-content: center;
}

.icon-container--align-right {
  justify-content: flex-end;
}

/* Background Color Classes */
.icon-container--color-info {
  background-color: var(--info-color);
}

.icon-container--color-warning {
  background-color: var(--warning-color);
}

.icon-container--color-alert {
  background-color: var(--alert-color);
}

.icon-container--color-success {
  background-color: var(--success-color);
}

.icon-container--color-neutral {
  background-color: var(--neutral-color);
}

.icon-container--color-dark {
  background-color: var(--dark-color);
}

.icon-container--color-classy-color-1 {
  background-color: var(--classy-color-1);
}

.icon-container--color-classy-color-2 {
  background-color: var(--classy-color-2);
}

.icon-container--color-classy-color-3 {
  background-color: var(--classy-color-3);
}

.icon-container--color-classy-color-4 {
  background-color: var(--classy-color-4);
}

.icon-container--color-classy-color-5 {
  background-color: var(--classy-color-5);
}

.icon-container--color-small-switch-color-1 {
  background-color: var(--small-switch-color-1);
}

.icon-container--color-small-switch-color-2 {
  background-color: var(--small-switch-color-2);
}

.icon-container--color-natural-color-1 {
  background-color: var(--natural-color-1);
}

.icon-container--color-natural-color-2 {
  background-color: var(--natural-color-2);
}

.icon-container--color-natural-color-3 {
  background-color: var(--natural-color-3);
}

.icon-container--color-grey-friend-1 {
  background-color: var(--grey-friend-1);
}

.icon-container--color-grey-friend-2 {
  background-color: var(--grey-friend-2);
}

.icon-container--color-shade-1 {
  background-color: var(--shade-1);
}

.icon-container--color-shade-2 {
  background-color: var(--shade-2);
}

.icon-container--color-shade-3 {
  background-color: var(--shade-3);
}

.icon-container--color-shade-4 {
  background-color: var(--shade-4);
}

/* Icon Styles */
.icon {
  display: inline-block;
}

.icon--color-info {
  color: var(--info-color);
}

.icon--color-warning {
  color: var(--warning-color);
}

.icon--color-alert {
  color: var(--alert-color);
}

.icon--color-success {
  color: var(--success-color);
}

.icon--color-neutral {
  color: var(--neutral-color);
}

.icon--color-dark {
  color: var(--dark-color);
}

.icon--color-classy-color-1 {
  color: var(--classy-color-1);
}

.icon--color-classy-color-2 {
  color: var(--classy-color-2);
}

.icon--color-classy-color-3 {
  color: var(--classy-color-3);
}

.icon--color-classy-color-4 {
  color: var(--classy-color-4);
}

.icon--color-classy-color-5 {
  color: var(--classy-color-5);
}

.icon--color-small-switch-color-1 {
  color: var(--small-switch-color-1);
}

.icon--color-small-switch-color-2 {
  color: var(--small-switch-color-2);
}

.icon--color-natural-color-1 {
  color: var(--natural-color-1);
}

.icon--color-natural-color-2 {
  color: var(--natural-color-2);
}

.icon--color-natural-color-3 {
  color: var(--natural-color-3);
}

.icon--color-grey-friend-1 {
  color: var(--grey-friend-1);
}

.icon--color-grey-friend-2 {
  color: var(--grey-friend-2);
}

.icon--color-shade-1 {
  color: var(--shade-1);
}

.icon--color-shade-2 {
  color: var(--shade-2);
}

.icon--color-shade-3 {
  color: var(--shade-3);
}

.icon--color-shade-4 {
  color: var(--shade-4);
}

.icon--size-small {
  font-size: var(--font-size-small);
}

.icon--size-normal {
  font-size: var(--font-size-base);
}

.icon--size-big {
  font-size: var(--font-size-large);
}

---

// src/stories/Atoms/Icon/Icon.jsx
import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import './Icon.css';

export const Icon = ({
  icon: IconComponent,
  background = false,
  color = 'neutral',
  shape = 'square',
  size = 'normal',
  align = 'left',
  className = '',
  style = {},
  ...props
}) => {
  const containerClasses = classNames('icon-container', className, {
    'icon-container--background': background,
    [`icon-container--shape-${shape}`]: shape,
    [`icon-container--size-${size}`]: size,
    [`icon-container--align-${align}`]: align,
    [`icon-container--color-${color}`]: background,
  });

  const iconClasses = classNames('icon', {
    [`icon--color-${color}`]: !background,
    [`icon--size-${size}`]: size,
  });

  return background ? (
    <div className={containerClasses} style={style} {...props}>
      <IconComponent className={iconClasses} />
    </div>
  ) : (
    <IconComponent className={iconClasses} style={style} {...props} />
  );
};

Icon.propTypes = {
  /** Icon component from react-icons or similar library */
  icon: PropTypes.elementType.isRequired,
  /** Whether to display a background behind the icon */
  background: PropTypes.bool,
  /** Color of the icon or background */
  color: PropTypes.oneOf([
    'info',
    'warning',
    'alert',
    'success',
    'neutral',
    'dark',
    'classy-color-1',
    'classy-color-2',
    'classy-color-3',
    'classy-color-4',
    'classy-color-5',
    'small-switch-color-1',
    'small-switch-color-2',
    'natural-color-1',
    'natural-color-2',
    'natural-color-3',
    'grey-friend-1',
    'grey-friend-2',
    'shade-1',
    'shade-2',
    'shade-3',
    'shade-4',
  ]),
  /** Shape of the background */
  shape: PropTypes.oneOf(['rounded', 'square']),
  /** Size of the icon */
  size: PropTypes.oneOf(['small', 'normal', 'big']),
  /** Alignment of the icon within its container */
  align: PropTypes.oneOf(['left', 'center', 'right']),
  /** Additional CSS classes */
  className: PropTypes.string,
  /** Inline styles */
  style: PropTypes.object,
};

---

// src/stories/Atoms/Icon/Icon.stories.jsx
import React from 'react';
import { Icon } from './Icon';
import { FaBeer, FaCoffee, FaApple, FaAndroid, FaReact, FaCheck, FaTimes, FaInfoCircle, FaExclamationTriangle, FaQuestionCircle } from 'react-icons/fa';
import './Icon.css';

export default {
  title: 'Atoms/Media/Icon',
  component: Icon,
  argTypes: {
    icon: {
      control: 'object',
      description: 'Icon component from react-icons or similar library.',
    },
    background: {
      control: 'boolean',
      description: 'Whether to display a background behind the icon.',
    },
    color: {
      control: {
        type: 'select',
        options: [
          'info',
          'warning',
          'alert',
          'success',
          'neutral',
          'dark',
          'classy-color-1',
          'classy-color-2',
          'classy-color-3',
          'classy-color-4',
          'classy-color-5',
          'small-switch-color-1',
          'small-switch-color-2',
          'natural-color-1',
          'natural-color-2',
          'natural-color-3',
          'grey-friend-1',
          'grey-friend-2',
          'shade-1',
          'shade-2',
          'shade-3',
          'shade-4',
        ],
      },
      description: 'Color of the icon or background.',
    },
    shape: {
      control: {
        type: 'select',
        options: ['rounded', 'square'],
      },
      description: 'Shape of the icon background.',
    },
    size: {
      control: {
        type: 'select',
        options: ['small', 'normal', 'big'],
      },
      description: 'Size of the icon.',
    },
    align: {
      control: {
        type: 'select',
        options: ['left', 'center', 'right'],
      },
      description: 'Alignment of the icon within its container.',
    },
    className: {
      control: 'text',
      description: 'Additional CSS classes.',
    },
    style: {
      control: 'object',
      description: 'Inline styles.',
    },
  },
};

const icons = {
  FaBeer: FaBeer,
  FaCoffee: FaCoffee,
  FaApple: FaApple,
  FaAndroid: FaAndroid,
  FaReact: FaReact,
  FaCheck: FaCheck,
  FaTimes: FaTimes,
  FaInfoCircle: FaInfoCircle,
  FaExclamationTriangle: FaExclamationTriangle,
  FaQuestionCircle: FaQuestionCircle,
};

/**
 * All Icons Collection
 */
export const AllIcons = () => (
  <div className="icon-collection">
    {Object.entries(icons).map(([name, IconComponent]) => (
      <div key={name} className="icon-item">
        <Icon
          icon={IconComponent}
          background={false}
          color="neutral"
          shape="square"
          size="normal"
        />
        <p>{name}</p>
      </div>
    ))}
  </div>
);

/**
 * Icon with Background
 */
export const IconWithBackground = () => (
  <Icon
    icon={FaBeer}
    background
    color="success"
    shape="rounded"
    size="big"
    align="center"
  />
);

/**
 * Icon without Background
 */
export const IconWithoutBackground = () => (
  <Icon
    icon={FaCoffee}
    background={false}
    color="warning"
    size="normal"
    align="left"
  />
);

/**
 * Rounded Icon with Different Colors
 */
export const RoundedIcons = () => (
  <div className="icon-story">
    <Icon icon={FaApple} background color="info" shape="rounded" size="small" />
    <Icon icon={FaAndroid} background color="alert" shape="rounded" size="normal" />
    <Icon icon={FaReact} background color="shade-3" shape="rounded" size="big" />
  </div>
);

/**
 * Square Icon with Different Colors
 */
export const SquareIcons = () => (
  <div className="icon-story">
    <Icon icon={FaBeer} background color="neutral" shape="square" size="small" />
    <Icon icon={FaCoffee} background color="dark" shape="square" size="normal" />
    <Icon icon={FaApple} background color="classy-color-2" shape="square" size="big" />
  </div>
);

/**
 * Interactive Icon
 */
const Template = (args) => <Icon {...args} />;

export const InteractiveIcon = Template.bind({});
InteractiveIcon.args = {
  icon: FaReact,
  background: false,
  color: 'info',
  shape: 'rounded',
  size: 'normal',
  align: 'center',
};
InteractiveIcon.storyName = 'Interactive Icon';

---

/* src/stories/Atoms/Image/Image.css */

.image-figure {
  position: relative;
  display: inline-block;
  margin: 0;
}

.image__placeholder {
  width: 100%;
  height: 100%;
  background-color: var(--neutral-color);
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--background-color);
  position: absolute;
  top: 0;
  left: 0;
}

.image {
  display: block;
  width: 100%;
  height: auto;
  object-fit: cover;
  cursor: pointer;
  transition: transform var(--transition-speed) ease, box-shadow var(--transition-speed) ease, opacity var(--transition-speed) ease;
  opacity: 0;
}

.image--loaded {
  opacity: 1;
}

.image--error {
  opacity: 1;
}

.image--thumbnail {
  max-width: 100%;
  height: auto;
}

.image--avatar {
  border-radius: 50%;
  object-fit: cover;
  max-width: 100%;
  height: auto;
}

.image--expanded {
  cursor: default;
}

.image--flat {
  cursor: default;
  max-width: none;
}

.image--16by9 {
  aspect-ratio: 16 / 9;
}

.image--4by3 {
  aspect-ratio: 4 / 3;
}

.image--1by1 {
  aspect-ratio: 1 / 1;
}

.image--crop-center {
  object-position: center;
}

.image--crop-top {
  object-position: top;
}

.image--crop-left {
  object-position: left;
}

.image--size-xs {
  width: 30px;
  height: 30px;
}

.image--size-sm {
  width: 50px;
  height: 50px;
}

.image--size-md {
  width: 100px;
  height: 100px;
}

.image--size-lg {
  width: 150px;
  height: 150px;
}

.image--size-xl {
  width: 200px;
  height: 200px;
}

.image:hover {
  transform: scale(1.05);
  box-shadow: var(--box-shadow);
}

.image__caption {
  text-align: center;
  margin-top: var(--spacing-sm);
  font-size: var(--font-size-small);
  color: var(--muted-text-color);
}

/* Overlay Styles */
.image__overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  opacity: 0;
  transition: opacity var(--transition-speed) ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.image-figure:hover .image__overlay {
  opacity: 1;
}

.image__overlay-caption {
  color: #fff;
  font-size: var(--font-size-base);
  text-align: center;
}

.image__overlay-icons {
  display: flex;
  gap: 10px;
}

.image__overlay-icons--center {
  justify-content: center;
}

.image__overlay-icons--top-right {
  position: absolute;
  top: var(--spacing-sm);
  right: var(--spacing-sm);
}

.image__overlay-icon {
  color: #fff;
  font-size: 1.5em;
  cursor: pointer;
}

/* Modal Styles */
.image__modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.8);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: var(--z-index-modal);
}

.image__modal-content {
  position: relative;
  width: 90%;
  max-width: 700px;
  height: 90%;
  max-height: 500px;
  background-color: #fff;
  border-radius: var(--border-radius);
  box-shadow: var(--box-shadow);
  overflow: hidden;
}

.image__modal-img {
  width: 100%;
  height: auto;
  border-radius: var(--border-radius);
}

.image__modal-caption {
  margin-top: var(--spacing-sm);
  text-align: center;
  color: var(--text-color);
  font-size: var(--font-size-small);
}

.image__modal-close {
  position: absolute;
  top: var(--spacing-xs);
  right: var(--spacing-xs);
  background: none;
  border: none;
  color: var(--dark-color);
  font-size: 2rem;
  cursor: pointer;
}

/* Responsive Styles */
@media (max-width: 768px) {
  .image--avatar {
    width: 80px;
    height: 80px;
  }

  .image__modal-content {
    width: 95%;
    height: 80%;
    max-width: 90%;
    max-height: 400px;
  }

  .image__overlay-caption {
    font-size: var(--font-size-small);
  }

  .image__overlay-icon {
    font-size: 1.2em;
  }
}

/* Flat Image Styles */
.image--flat:hover {
  transform: none;
  box-shadow: none;
}

---

// src/stories/Atoms/Image/Image.jsx
import React, { useState } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import './Image.css';

export const Image = ({
  src,
  alt,
  width,
  height,
  loading = 'lazy',
  title,
  caption,
  variant = 'thumbnail', // 'thumbnail', 'avatar', 'expanded', 'flat'
  aspectRatio,
  crop = 'center', // 'center', 'top', 'left'
  fallbackSrc = '/fallback.jpg',
  srcSet,
  sizes,
  lazyLoad = true,
  onClickExpand,
  hoverIcons = [],
  hoverCaption,
  hoverIconPosition = 'center', // 'center', 'top-right'
  size = 'md', // 'xs', 'sm', 'md', 'lg', 'xl'
  className = '',
  style = {},
  ...props
}) => {
  const [isLoaded, setIsLoaded] = useState(false);
  const [isError, setIsError] = useState(false);
  const [isExpanded, setIsExpanded] = useState(false);

  const handleImageLoad = () => {
    setIsLoaded(true);
  };

  const handleImageError = () => {
    setIsError(true);
  };

  const handleExpand = () => {
    if (variant !== 'expanded' && variant !== 'flat') {
      setIsExpanded(true);
    }
    if (onClickExpand) {
      onClickExpand();
    }
  };

  const handleCloseExpand = () => {
    setIsExpanded(false);
  };

  const imageClasses = classNames('image', className, {
    [`image--${variant}`]: variant,
    [`image--${aspectRatio}`]: aspectRatio,
    [`image--${crop}`]: crop,
    [`image--size-${size}`]: size,
    'image--loaded': isLoaded,
    'image--error': isError,
  });

  const showOverlay = variant !== 'flat' && (hoverIcons.length > 0 || hoverCaption);

  return (
    <>
      <figure className="image-figure" style={style} {...props}>
        {!isLoaded && !isError && <div className="image__placeholder">Loading...</div>}
        <img
          src={isError ? fallbackSrc : src}
          alt={alt}
          width={width}
          height={height}
          loading={lazyLoad ? loading : 'eager'}
          title={title}
          className={imageClasses}
          srcSet={srcSet}
          sizes={sizes}
          onLoad={handleImageLoad}
          onError={handleImageError}
          onClick={variant !== 'flat' ? handleExpand : undefined}
          role={variant === 'expanded' ? 'img' : 'button'}
          tabIndex={variant !== 'flat' ? '0' : undefined}
          onKeyPress={(e) => {
            if ((e.key === 'Enter' || e.key === ' ') && variant !== 'flat') {
              handleExpand();
            }
          }}
        />
        {caption && <figcaption className="image__caption">{caption}</figcaption>}

        {showOverlay && (
          <div className="image__overlay">
            {hoverCaption && (
              <div className="image__overlay-caption">
                {hoverCaption}
              </div>
            )}
            {hoverIcons.length > 0 && (
              <div
                className={classNames('image__overlay-icons', {
                  'image__overlay-icons--center': hoverIconPosition === 'center',
                  'image__overlay-icons--top-right': hoverIconPosition === 'top-right',
                })}
              >
                {hoverIcons.map((IconComponent, index) => (
                  <IconComponent key={index} className="image__overlay-icon" />
                ))}
              </div>
            )}
          </div>
        )}
      </figure>

      {isExpanded && (
        <div className="image__modal" onClick={handleCloseExpand} role="dialog" aria-modal="true">
          <div className="image__modal-content" onClick={(e) => e.stopPropagation()}>
            <button className="image__modal-close" onClick={handleCloseExpand} aria-label="Close">
              &times;
            </button>
            <img src={src} alt={alt} className="image__modal-img" />
            {caption && <div className="image__modal-caption">{caption}</div>}
          </div>
        </div>
      )}
    </>
  );
};

Image.propTypes = {
  /** Source URL of the image */
  src: PropTypes.string.isRequired,
  /** Alternative text for the image */
  alt: PropTypes.string.isRequired,
  /** Width of the image */
  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /** Height of the image */
  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /** Loading behavior */
  loading: PropTypes.oneOf(['lazy', 'eager']),
  /** Tooltip text */
  title: PropTypes.string,
  /** Caption for the image */
  caption: PropTypes.string,
  /** Variant of the image */
  variant: PropTypes.oneOf(['thumbnail', 'avatar', 'expanded', 'flat']),
  /** Aspect ratio of the image */
  aspectRatio: PropTypes.oneOf(['16by9', '4by3', '1by1']),
  /** Crop position */
  crop: PropTypes.oneOf(['center', 'top', 'left']),
  /** Fallback image source */
  fallbackSrc: PropTypes.string,
  /** srcSet for responsive images */
  srcSet: PropTypes.string,
  /** sizes attribute for responsive images */
  sizes: PropTypes.string,
  /** Enable lazy loading */
  lazyLoad: PropTypes.bool,
  /** Function to handle expand action */
  onClickExpand: PropTypes.func,
  /** Icons to display on hover */
  hoverIcons: PropTypes.arrayOf(PropTypes.elementType),
  /** Caption to display on hover */
  hoverCaption: PropTypes.string,
  /** Position of hover icons */
  hoverIconPosition: PropTypes.oneOf(['center', 'top-right']),
  /** Size of the image */
  size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
  /** Additional CSS classes */
  className: PropTypes.string,
  /** Inline styles */
  style: PropTypes.object,
};

---

// src/stories/Atoms/Image/Image.stories.jsx
import React from 'react';
import { Image } from './Image';
import { FaHeart, FaShare, FaEdit, FaTrash, FaSearch } from 'react-icons/fa';
import './Image.css';

export default {
  title: 'Atoms/Media/Image',
  component: Image,
  argTypes: {
    src: {
      control: 'text',
      description: 'Source URL of the image.',
    },
    alt: {
      control: 'text',
      description: 'Alternative text for the image.',
    },
    width: {
      control: 'text',
      description: 'Width of the image.',
    },
    height: {
      control: 'text',
      description: 'Height of the image.',
    },
    loading: {
      control: {
        type: 'select',
        options: ['lazy', 'eager'],
      },
      description: 'Loading behavior.',
    },
    title: {
      control: 'text',
      description: 'Tooltip text.',
    },
    caption: {
      control: 'text',
      description: 'Caption for the image.',
    },
    variant: {
      control: {
        type: 'select',
        options: ['thumbnail', 'avatar', 'expanded', 'flat'],
      },
      description: 'Variant of the image.',
    },
    aspectRatio: {
      control: {
        type: 'select',
        options: ['16by9', '4by3', '1by1'],
      },
      description: 'Aspect ratio of the image.',
    },
    crop: {
      control: {
        type: 'select',
        options: ['center', 'top', 'left'],
      },
      description: 'Crop position of the image.',
    },
    fallbackSrc: {
      control: 'text',
      description: 'Fallback image source if the main image fails to load.',
    },
    srcSet: {
      control: 'text',
      description: 'srcSet for responsive images.',
    },
    sizes: {
      control: 'text',
      description: 'Sizes attribute for responsive images.',
    },
    lazyLoad: {
      control: 'boolean',
      description: 'Enable lazy loading.',
    },
    onClickExpand: {
      action: 'clicked',
      description: 'Function to handle expand action.',
    },
    hoverIcons: {
      control: 'object',
      description: 'Icons to display on hover.',
    },
    hoverCaption: {
      control: 'text',
      description: 'Caption to display on hover.',
    },
    hoverIconPosition: {
      control: {
        type: 'select',
        options: ['center', 'top-right'],
      },
      description: 'Position of hover icons.',
    },
    size: {
      control: {
        type: 'select',
        options: ['xs', 'sm', 'md', 'lg', 'xl'],
      },
      description: 'Size of the image.',
    },
    className: {
      control: 'text',
      description: 'Additional CSS classes.',
    },
    style: {
      control: 'object',
      description: 'Inline styles.',
    },
  },
};

/**
 * Thumbnail Variant
 */
export const Thumbnail = () => (
  <Image
    src="https://via.placeholder.com/300x200"
    alt="Thumbnail Image"
    variant="thumbnail"
    caption="This is a thumbnail image."
    size="md"
  />
);

/**
 * Avatar Variant - 5 Sizes
 */
export const AvatarSizes = () => (
  <div className="avatar-sizes" style={{ display: 'flex', gap: '16px' }}>
    <Image
      src="https://via.placeholder.com/30"
      alt="Avatar XS"
      variant="avatar"
      size="xs"
      caption="XS Avatar"
    />
    <Image
      src="https://via.placeholder.com/50"
      alt="Avatar SM"
      variant="avatar"
      size="sm"
      caption="SM Avatar"
    />
    <Image
      src="https://via.placeholder.com/70"
      alt="Avatar MD"
      variant="avatar"
      size="md"
      caption="MD Avatar"
    />
    <Image
      src="https://via.placeholder.com/90"
      alt="Avatar LG"
      variant="avatar"
      size="lg"
      caption="LG Avatar"
    />
    <Image
      src="https://via.placeholder.com/110"
      alt="Avatar XL"
      variant="avatar"
      size="xl"
      caption="XL Avatar"
    />
  </div>
);

/**
 * Expanded Variant
 */
export const Expanded = () => (
  <Image
    src="https://via.placeholder.com/800x600"
    alt="Expanded Image"
    variant="expanded"
    caption="This is an expanded image."
    onClickExpand={() => console.log('Image expanded')}
  />
);

/**
 * Flat Variant
 */
export const Flat = () => (
  <Image
    src="https://via.placeholder.com/400x300"
    alt="Flat Image"
    variant="flat"
    caption="This is a flat image with no overlay."
  />
);

/**
 * Image with Aspect Ratio
 */
export const ImageWithAspectRatio = () => (
  <Image
    src="https://via.placeholder.com/400x300"
    alt="16 by 9 Image"
    variant="thumbnail"
    aspectRatio="16by9"
    caption="Image with 16:9 aspect ratio."
    size="lg"
  />
);

/**
 * Image with Crop
 */
export const ImageWithCrop = () => (
  <Image
    src="https://via.placeholder.com/400x300"
    alt="Cropped Image"
    variant="thumbnail"
    crop="top"
    caption="Image cropped from the top."
    size="md"
  />
);

/**
 * Image with Fallback
 */
export const ImageWithFallback = () => (
  <Image
    src="https://invalid-url.com/image.jpg"
    alt="Image with fallback"
    variant="thumbnail"
    fallbackSrc="https://via.placeholder.com/300x200?text=Fallback+Image"
    caption="This image failed to load and shows a fallback."
    size="md"
  />
);

/**
 * Responsive Image
 */
export const ResponsiveImage = () => (
  <Image
    src="https://via.placeholder.com/800x600"
    alt="Responsive Image"
    variant="thumbnail"
    srcSet="
      https://via.placeholder.com/400x300 400w,
      https://via.placeholder.com/800x600 800w,
      https://via.placeholder.com/1200x900 1200w
    "
    sizes="(max-width: 600px) 100vw, (max-width: 1200px) 50vw, 800px"
    caption="This image is responsive using srcSet and sizes."
    size="lg"
  />
);

/**
 * Click to Expand Image
 */
export const ClickToExpand = () => (
  <Image
    src="https://via.placeholder.com/600x400"
    alt="Clickable Image"
    variant="thumbnail"
    caption="Clicking this image will expand it."
    onClickExpand={() => alert('Image clicked to expand!')}
    size="md"
  />
);

/**
 * On Hover Show Icons at Center
 */
export const HoverIconsCenter = () => (
  <Image
    src="https://via.placeholder.com/300x200"
    alt="Hover Icons Center"
    variant="thumbnail"
    caption="Hover to see icons at center."
    hoverIcons={[FaHeart, FaShare]}
    hoverIconPosition="center"
    size="md"
  />
);

/**
 * On Hover Show Caption Overlay
 */
export const HoverCaptionOverlay = () => (
  <Image
    src="https://via.placeholder.com/300x200"
    alt="Hover Caption"
    variant="thumbnail"
    hoverCaption="This is an overlay caption."
    size="md"
  />
);

/**
 * On Hover Show Icons at Top Right
 */
export const HoverIconsTopRight = () => (
  <Image
    src="https://via.placeholder.com/300x200"
    alt="Hover Icons Top Right"
    variant="thumbnail"
    hoverIcons={[FaEdit, FaTrash]}
    hoverIconPosition="top-right"
    caption="Hover to see icons at top right."
    size="md"
  />
);

/**
 * Interactive Image
 */
const Template = (args) => <Image {...args} />;

export const InteractiveImage = Template.bind({});
InteractiveImage.args = {
  src: 'https://via.placeholder.com/500x300',
  alt: 'Interactive Image',
  variant: 'thumbnail',
  caption: 'This is an interactive image.',
  aspectRatio: '4by3',
  crop: 'center',
  hoverIcons: [FaSearch],
  hoverCaption: 'Search this image',
  hoverIconPosition: 'center',
  size: 'md',
};

---

/* src/stories/Atoms/Label/Label.css */

.label {
  display: inline-block;
  font-weight: 500;
  text-align: center;
  border-radius: 0.25rem;
  transition: background-color 0.3s ease, color 0.3s ease, border 0.3s ease;
  cursor: default;
}

.label--background {
  color: #fff;
}

.label--color-primary {
  background-color: var(--primary-color);
}

.label--color-secondary {
  border: 1px solid var(--secondary-color);
  color: var(--secondary-color);
  background-color: transparent;
}

.label--color-info {
  background-color: var(--info-color);
}

.label--color-warning {
  background-color: var(--warning-color);
}

.label--color-alert {
  background-color: var(--alert-color);
}

.label--color-success {
  background-color: var(--success-color);
}

.label--color-neutral {
  background-color: var(--neutral-color);
}

.label--color-dark {
  background-color: var(--dark-color);
}

.label--color-classy-color-1 {
  background-color: var(--classy-color-1);
}

.label--color-classy-color-2 {
  background-color: var(--classy-color-2);
}

.label--color-classy-color-3 {
  background-color: var(--classy-color-3);
}

.label--color-classy-color-4 {
  background-color: var(--classy-color-4);
}

.label--color-classy-color-5 {
  background-color: var(--classy-color-5);
}

.label--color-small-switch-color-1 {
  background-color: var(--small-switch-color-1);
}

.label--color-small-switch-color-2 {
  background-color: var(--small-switch-color-2);
}

.label--color-natural-color-1 {
  background-color: var(--natural-color-1);
}

.label--color-natural-color-2 {
  background-color: var(--natural-color-2);
}

.label--color-natural-color-3 {
  background-color: var(--natural-color-3);
}

.label--color-grey-friend-1 {
  background-color: var(--grey-friend-1);
}

.label--color-grey-friend-2 {
  background-color: var(--grey-friend-2);
}

.label--color-shade-1 {
  background-color: var(--shade-1);
}

.label--color-shade-2 {
  background-color: var(--shade-2);
}

.label--color-shade-3 {
  background-color: var(--shade-3);
}

.label--color-shade-4 {
  background-color: var(--shade-4);
}

/* Secondary Labels (no background) */
.label--color-secondary:not(.label--background) {
  border: 1px solid var(--secondary-color);
  color: var(--secondary-color);
  background-color: transparent;
}

/* Shape Variations */
.label--shape-rounded {
  border-radius: 0.25rem;
}

.label--shape-square {
  border-radius: 0;
}

.label--shape-pill {
  border-radius: 9999px;
}

/* Size Variations */
.label--size-xs {
  font-size: 0.6rem;
  padding: 0.2em 0.4em;
}

.label--size-sm {
  font-size: 0.75rem;
  padding: 0.25em 0.5em;
}

.label--size-md {
  font-size: 0.875rem;
  padding: 0.3em 0.6em;
}

.label--size-lg {
  font-size: 1rem;
  padding: 0.35em 0.7em;
}

.label--size-xl {
  font-size: 1.125rem;
  padding: 0.4em 0.8em;
}

/* Additional Styles */
.label-colors, .label-shapes, .label-sizes {
  display: flex;
  flex-wrap: wrap;
  gap: var(--spacing-md);
  align-items: center;
  margin-bottom: var(--spacing-md);
}

.label-sizes .label {
  margin-right: var(--spacing-sm);
}

---

// src/stories/Atoms/Label/Label.jsx
import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import './Label.css';

export const Label = ({
  text,
  color = 'neutral',
  background = true,
  shape = 'rounded', // 'rounded', 'square', 'pill'
  size = 'md', // 'xs', 'sm', 'md', 'lg', 'xl'
  className = '',
  style = {},
  ...props
}) => {
  const labelClasses = classNames('label', className, {
    [`label--color-${color}`]: color,
    [`label--background`]: background && color !== 'secondary',
    [`label--shape-${shape}`]: shape,
    [`label--size-${size}`]: size,
  });

  return (
    <span className={labelClasses} style={style} {...props}>
      {text}
    </span>
  );
};

Label.propTypes = {
  /** Text content of the label */
  text: PropTypes.string.isRequired,
  /** Color of the label */
  color: PropTypes.oneOf([
    'primary',
    'secondary',
    'info',
    'warning',
    'alert',
    'success',
    'neutral',
    'dark',
    'classy-color-1',
    'classy-color-2',
    'classy-color-3',
    'classy-color-4',
    'classy-color-5',
    'small-switch-color-1',
    'small-switch-color-2',
    'natural-color-1',
    'natural-color-2',
    'natural-color-3',
    'grey-friend-1',
    'grey-friend-2',
    'shade-1',
    'shade-2',
    'shade-3',
    'shade-4',
  ]),
  /** Whether the label has a background */
  background: PropTypes.bool,
  /** Shape of the label */
  shape: PropTypes.oneOf(['rounded', 'square', 'pill']),
  /** Size of the label */
  size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
  /** Additional CSS classes */
  className: PropTypes.string,
  /** Inline styles */
  style: PropTypes.object,
};

---

// src/stories/Atoms/Label/Label.stories.jsx
import React from 'react';
import { Label } from './Label';
import './Label.css';

export default {
  title: 'Atoms/Text/Label',
  component: Label,
  argTypes: {
    text: {
      control: 'text',
      description: 'Text content of the label.',
    },
    color: {
      control: {
        type: 'select',
        options: [
          'primary',
          'secondary',
          'info',
          'warning',
          'alert',
          'success',
          'neutral',
          'dark',
          'classy-color-1',
          'classy-color-2',
          'classy-color-3',
          'classy-color-4',
          'classy-color-5',
          'small-switch-color-1',
          'small-switch-color-2',
          'natural-color-1',
          'natural-color-2',
          'natural-color-3',
          'grey-friend-1',
          'grey-friend-2',
          'shade-1',
          'shade-2',
          'shade-3',
          'shade-4',
        ],
      },
      description: 'Color of the label.',
    },
    background: {
      control: 'boolean',
      description: 'Whether the label has a background.',
    },
    shape: {
      control: {
        type: 'select',
        options: ['rounded', 'square', 'pill'],
      },
      description: 'Shape of the label.',
    },
    size: {
      control: {
        type: 'select',
        options: ['xs', 'sm', 'md', 'lg', 'xl'],
      },
      description: 'Size of the label.',
    },
    className: {
      control: 'text',
      description: 'Additional CSS classes.',
    },
    style: {
      control: 'object',
      description: 'Inline styles.',
    },
  },
};

/**
 * Primary Label with Background
 */
export const PrimaryLabel = () => (
  <Label
    text="Primary Label"
    color="primary"
    background={true}
    shape="pill"
    size="md"
  />
);

/**
 * Secondary Label without Background
 */
export const SecondaryLabel = () => (
  <Label
    text="Secondary Label"
    color="secondary"
    background={false}
    shape="rounded"
    size="md"
  />
);

/**
 * All Color Variations
 */
export const AllColors = () => (
  <div className="label-colors">
    {[
      'primary',
      'secondary',
      'info',
      'warning',
      'alert',
      'success',
      'neutral',
      'dark',
      'classy-color-1',
      'classy-color-2',
      'classy-color-3',
      'classy-color-4',
      'classy-color-5',
      'small-switch-color-1',
      'small-switch-color-2',
      'natural-color-1',
      'natural-color-2',
      'natural-color-3',
      'grey-friend-1',
      'grey-friend-2',
      'shade-1',
      'shade-2',
      'shade-3',
      'shade-4',
    ].map((color) => (
      <Label
        key={color}
        text={color}
        color={color}
        background={color !== 'secondary'}
        shape="rounded"
        size="sm"
      />
    ))}
  </div>
);

/**
 * Label Shapes
 */
export const LabelShapes = () => (
  <div className="label-shapes">
    <Label text="Rounded" color="info" background={true} shape="rounded" size="md" />
    <Label text="Square" color="warning" background={true} shape="square" size="md" />
    <Label text="Pill" color="success" background={true} shape="pill" size="md" />
  </div>
);

/**
 * Label Sizes
 */
export const LabelSizes = () => (
  <div className="label-sizes">
    <Label text="XS" color="neutral" background={true} shape="rounded" size="xs" />
    <Label text="SM" color="neutral" background={true} shape="rounded" size="sm" />
    <Label text="MD" color="neutral" background={true} shape="rounded" size="md" />
    <Label text="LG" color="neutral" background={true} shape="rounded" size="lg" />
    <Label text="XL" color="neutral" background={true} shape="rounded" size="xl" />
  </div>
);

/**
 * Interactive Label
 */
const Template = (args) => <Label {...args} />;

export const InteractiveLabel = Template.bind({});
InteractiveLabel.args = {
  text: 'Interactive Label',
  color: 'primary',
  background: true,
  shape: 'pill',
  size: 'md',
};
--

/* src/stories/Atoms/Link/Link.css */

.link {
  color: var(--link-color);
  font-size: var(--font-size-base);
  font-family: var(--font-family);
  transition: color var(--transition-speed) ease, text-decoration var(--transition-speed) ease;
}

.link--underline {
  text-decoration: underline;
}

.link--no-underline {
  text-decoration: none;
}

.link--bold {
  font-weight: var(--font-weight-bold);
}

.link--external {
  display: inline-flex;
  align-items: center;
}

.link__external-icon {
  margin-left: 0.25em;
  font-size: 0.8em;
}

.link:hover {
  color: var(--link-hover-color);
}

.link:hover.text-decoration {
  text-decoration: underline;
}

/* Experimental Preview Styles */
.link__preview {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 90%;
  max-width: 700px;
  height: 90%;
  max-height: 500px;
  background-color: #fff;
  border: 2px solid var(--primary-color);
  box-shadow: var(--box-shadow);
  z-index: var(--z-index-modal);
  overflow: hidden;
}

.link__preview-iframe {
  width: 100%;
  height: 100%;
  border: none;
}

/* Responsive */
@media (max-width: 768px) {
  .link__preview {
    width: 95%;
    height: 80%;
    max-width: 90%;
    max-height: 400px;
  }
}

----
// src/stories/Atoms/Link/Link.jsx
import React, { useState } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import './Link.css';

export const Link = ({
  text,
  href,
  underline = true,
  bold = false,
  newWindow = false,
  external = false,
  experimentalPreview = false,
  className = '',
  style = {},
  ...props
}) => {
  const [showPreview, setShowPreview] = useState(false);

  const handleMouseDown = () => {
    if (experimentalPreview) {
      setShowPreview(true);
    }
  };

  const handleMouseUp = () => {
    if (experimentalPreview) {
      setShowPreview(false);
    }
  };

  const linkClasses = classNames('link', className, {
    'link--underline': underline,
    'link--no-underline': !underline,
    'link--bold': bold,
    'link--external': external,
  });

  return (
    <>
      <a
        href={href}
        className={linkClasses}
        target={newWindow ? '_blank' : '_self'}
        rel={newWindow ? 'noopener noreferrer' : undefined}
        onMouseDown={handleMouseDown}
        onMouseUp={handleMouseUp}
        onBlur={() => setShowPreview(false)}
        {...props}
      >
        {text} {external && <span className="link__external-icon">🔗</span>}
      </a>
      {showPreview && (
        <div className="link__preview">
          <iframe src={href} title="Preview" className="link__preview-iframe" />
        </div>
      )}
    </>
  );
};

Link.propTypes = {
  /** Text content of the link */
  text: PropTypes.string.isRequired,
  /** URL the link points to */
  href: PropTypes.string.isRequired,
  /** Whether the link is underlined */
  underline: PropTypes.bool,
  /** Whether the link text is bold */
  bold: PropTypes.bool,
  /** Whether the link opens in a new window */
  newWindow: PropTypes.bool,
  /** Whether the link is external */
  external: PropTypes.bool,
  /** Enable experimental preview on press */
  experimentalPreview: PropTypes.bool,
  /** Additional CSS classes */
  className: PropTypes.string,
  /** Inline styles */
  style: PropTypes.object,
};

---

// src/stories/Atoms/Link/Link.stories.jsx
import React from 'react';
import { Link } from './Link';
import './Link.css';

export default {
  title: 'Atoms/Text/Link',
  component: Link,
  argTypes: {
    text: {
      control: 'text',
      description: 'Text content of the link.',
    },
    href: {
      control: 'text',
      description: 'URL the link points to.',
    },
    underline: {
      control: 'boolean',
      description: 'Whether the link is underlined.',
    },
    bold: {
      control: 'boolean',
      description: 'Whether the link text is bold.',
    },
    newWindow: {
      control: 'boolean',
      description: 'Whether the link opens in a new window.',
    },
    external: {
      control: 'boolean',
      description: 'Whether the link is external.',
    },
    experimentalPreview: {
      control: 'boolean',
      description: 'Enable experimental preview on press.',
    },
    className: {
      control: 'text',
      description: 'Additional CSS classes.',
    },
    style: {
      control: 'object',
      description: 'Inline styles.',
    },
  },
};

/**
 * Default Link
 */
export const DefaultLink = () => (
  <Link
    text="Visit Neurons.me"
    href="https://neurons.me"
    underline={true}
    bold={false}
    newWindow={false}
    external={false}
    experimentalPreview={false}
  />
);

/**
 * Underlined and Bold Link
 */
export const UnderlinedBoldLink = () => (
  <Link
    text="Bold & Underlined Link"
    href="https://neurons.me"
    underline={true}
    bold={true}
    newWindow={false}
    external={false}
    experimentalPreview={false}
  />
);

/**
 * No Underline, Not Bold Link
 */
export const NoUnderlineNotBoldLink = () => (
  <Link
    text="Simple Link"
    href="https://neurons.me"
    underline={false}
    bold={false}
    newWindow={false}
    external={false}
    experimentalPreview={false}
  />
);

/**
 * Open in New Window Link
 */
export const OpenInNewWindow = () => (
  <Link
    text="Open in New Window"
    href="https://neurons.me"
    underline={true}
    bold={false}
    newWindow={true}
    external={false}
    experimentalPreview={false}
  />
);

/**
 * External Link with Notification
 */
export const ExternalLink = () => (
  <Link
    text="External Link"
    href="https://external.com"
    underline={true}
    bold={false}
    newWindow={true}
    external={true}
    experimentalPreview={false}
  />
);

/**
 * Experimental Preview Link
 */
export const ExperimentalPreview = () => (
  <Link
    text="Preview Link"
    href="https://neurons.me"
    underline={true}
    bold={false}
    newWindow={false}
    external={false}
    experimentalPreview={true}
  />
);

/**
 * Interactive Link
 */
const Template = (args) => <Link {...args} />;

export const InteractiveLink = Template.bind({});
InteractiveLink.args = {
  text: 'Interactive Link',
  href: 'https://neurons.me',
  underline: true,
  bold: true,
  newWindow: true,
  external: true,
  experimentalPreview: true,
};

----

/* src/stories/Atoms/Loader/Loader.css */

.loader {
  display: inline-flex;
  align-items: center;
  justify-content: center;
}

.loader--spinner .loader__spinner {
  border: 4px solid var(--loader-background-color, #f3f3f3);
  border-top: 4px solid var(--loader-color, #1F877D);
  border-radius: 50%;
  width: var(--loader-size, 40px);
  height: var(--loader-size, 40px);
  animation: spin 1s linear infinite;
}

.loader--dots .loader__dots {
  display: flex;
  gap: 8px;
}

.loader--dots .loader__dot {
  width: 12px;
  height: 12px;
  background-color: var(--loader-color, #1F877D);
  border-radius: 50%;
  animation: bounce 1.4s infinite ease-in-out both;
}

.loader--dots .loader__dot:nth-child(1) {
  animation-delay: -0.32s;
}

.loader--dots .loader__dot:nth-child(2) {
  animation-delay: -0.16s;
}

.loader--bars .loader__bars {
  display: flex;
  gap: 4px;
}

.loader--bars .loader__bar {
  width: 4px;
  height: 20px;
  background-color: var(--loader-color, #1F877D);
  animation: stretch 1.2s infinite ease-in-out;
}

.loader--bars .loader__bar:nth-child(1) {
  animation-delay: -0.24s;
}

.loader--bars .loader__bar:nth-child(2) {
  animation-delay: -0.12s;
}

.loader--size-sm .loader__spinner {
  width: 20px;
  height: 20px;
  border-width: 2px;
}

.loader--size-md .loader__spinner {
  width: 40px;
  height: 40px;
  border-width: 4px;
}

.loader--size-lg .loader__spinner {
  width: 60px;
  height: 60px;
  border-width: 6px;
}

.loader--custom {
  --loader-color: var(--loader-color, #1F877D);
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

@keyframes bounce {
  0%, 80%, 100% { transform: scale(0); }
  40% { transform: scale(1); }
}

@keyframes stretch {
  0%, 40%, 100% { transform: scaleY(0.4); }
  20% { transform: scaleY(1); }
}

/* Color Variants */
.loader--primary .loader__spinner,
.loader--primary .loader__dot,
.loader--primary .loader__bar {
  --loader-color: #1F877D;
}

.loader--secondary .loader__spinner,
.loader--secondary .loader__dot,
.loader--secondary .loader__bar {
  --loader-color: #39a182;
}

---

// src/stories/Atoms/Loader/Loader.jsx
import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import './Loader.css';

export const Loader = ({
  variant = 'spinner', // 'spinner', 'dots', 'bars'
  color = 'primary', // 'primary', 'secondary', 'custom'
  size = 'md', // 'sm', 'md', 'lg'
  customColor,
  className = '',
  style = {},
  ...props
}) => {
  const loaderClasses = classNames('loader', className, {
    [`loader--${variant}`]: variant,
    [`loader--${color}`]: color && color !== 'custom',
    [`loader--size-${size}`]: size,
  });

  const loaderStyle = color === 'custom' && customColor ? { ...style, '--loader-color': customColor } : style;

  return (
    <div className={loaderClasses} style={loaderStyle} {...props}>
      {variant === 'spinner' && <div className="loader__spinner"></div>}
      {variant === 'dots' && (
        <div className="loader__dots">
          <div className="loader__dot"></div>
          <div className="loader__dot"></div>
          <div className="loader__dot"></div>
        </div>
      )}
      {variant === 'bars' && (
        <div className="loader__bars">
          <div className="loader__bar"></div>
          <div className="loader__bar"></div>
          <div className="loader__bar"></div>
        </div>
      )}
    </div>
  );
};

Loader.propTypes = {
  /** Variant of the loader */
  variant: PropTypes.oneOf(['spinner', 'dots', 'bars']),
  /** Color of the loader */
  color: PropTypes.oneOf(['primary', 'secondary', 'custom']),
  /** Custom color when color is set to 'custom' */
  customColor: PropTypes.string,
  /** Size of the loader */
  size: PropTypes.oneOf(['sm', 'md', 'lg']),
  /** Additional CSS classes */
  className: PropTypes.string,
  /** Inline styles */
  style: PropTypes.object,
};

---

// src/stories/Atoms/Loader/Loader.stories.jsx
import React from 'react';
import { Loader } from './Loader';
import './Loader.css';

export default {
  title: 'Atoms/Feedback/Loader',
  component: Loader,
  argTypes: {
    variant: {
      control: {
        type: 'select',
        options: ['spinner', 'dots', 'bars'],
      },
      description: 'Variant of the loader.',
    },
    color: {
      control: {
        type: 'select',
        options: ['primary', 'secondary', 'custom'],
      },
      description: 'Color of the loader.',
    },
    customColor: {
      control: 'color',
      description: 'Custom color when color is set to "custom".',
    },
    size: {
      control: {
        type: 'select',
        options: ['sm', 'md', 'lg'],
      },
      description: 'Size of the loader.',
    },
    className: {
      control: 'text',
      description: 'Additional CSS classes.',
    },
    style: {
      control: 'object',
      description: 'Inline styles.',
    },
  },
};

/**
 * Spinner - Primary - Medium
 */
export const SpinnerPrimaryMedium = () => (
  <Loader variant="spinner" color="primary" size="md" />
);

/**
 * Spinner - Secondary - Large
 */
export const SpinnerSecondaryLarge = () => (
  <Loader variant="spinner" color="secondary" size="lg" />
);

/**
 * Dots - Primary - Small
 */
export const DotsPrimarySmall = () => (
  <Loader variant="dots" color="primary" size="sm" />
);

/**
 * Dots - Secondary - Medium
 */
export const DotsSecondaryMedium = () => (
  <Loader variant="dots" color="secondary" size="md" />
);

/**
 * Bars - Primary - Medium
 */
export const BarsPrimaryMedium = () => (
  <Loader variant="bars" color="primary" size="md" />
);

/**
 * Bars - Custom Color - Large
 */
export const BarsCustomLarge = () => (
  <Loader variant="bars" color="custom" customColor="#FF5733" size="lg" />
);

/**
 * Interactive Loader
 */
const Template = (args) => <Loader {...args} />;

export const InteractiveLoader = Template.bind({});
InteractiveLoader.args = {
  variant: 'spinner',
  color: 'primary',
  size: 'md',
  customColor: '#FF5733',
};
---
/* src/stories/Atoms/Logo/Logo.css */

.logo {
    display: inline-flex;
    align-items: center;
    justify-content: center;
  }
  
  .logo__image {
    display: block;
    width: 100%;
    height: auto;
  }
  
  /* Size Variants */
  .logo--size-xs {
    width: 30px;
    height: 30px;
  }
  
  .logo--size-sm {
    width: 50px;
    height: 50px;
  }
  
  .logo--size-md {
    width: 100px;
    height: 100px;
  }
  
  .logo--size-lg {
    width: 150px;
    height: 150px;
  }
  
  .logo--size-xl {
    width: 200px;
    height: 200px;
  }
  
  /* Shape Variants */
  .logo--shape-normal {
    border-radius: 0;
  }
  
  .logo--shape-rounded {
    border-radius: 50%;
  }
  
  .logo--shape-squared {
    border-radius: 8px;
  }
  
  /* Background Variants */
  .logo--background-none {
    background-color: transparent;
  }
  
  .logo--background-palette {
    background-color: var(--palette-background-color, #f0f0f0);
  }
  
  .logo--background-custom {
    background-color: var(--logo-background-color, transparent);
  }
  
  /* Responsive */
  @media (max-width: 768px) {
    .logo--size-xs {
      width: 20px;
      height: 20px;
    }
  
    .logo--size-sm {
      width: 40px;
      height: 40px;
    }
  
    .logo--size-md {
      width: 80px;
      height: 80px;
    }
  
    .logo--size-lg {
      width: 120px;
      height: 120px;
    }
  
    .logo--size-xl {
      width: 160px;
      height: 160px;
    }
  }
  
  ---

  // src/stories/Atoms/Logo/Logo.jsx
import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import './Logo.css';

export const Logo = ({
  src,
  alt = 'Logo',
  size = 'md', // 'xs', 'sm', 'md', 'lg', 'xl'
  shape = 'normal', // 'normal', 'rounded', 'squared'
  background = 'none', // 'none', 'palette', 'custom'
  customBackgroundColor,
  className = '',
  style = {},
  ...props
}) => {
  const logoClasses = classNames('logo', className, {
    [`logo--size-${size}`]: size,
    [`logo--shape-${shape}`]: shape,
    [`logo--background-${background}`]: background,
  });

  const logoStyle =
    background === 'custom' && customBackgroundColor
      ? { ...style, '--logo-background-color': customBackgroundColor }
      : style;

  return (
    <div className={logoClasses} style={logoStyle} {...props}>
      <img src={src} alt={alt} className="logo__image" />
    </div>
  );
};

Logo.propTypes = {
  /** Source URL or path of the logo image */
  src: PropTypes.string.isRequired,
  /** Alternative text for the logo */
  alt: PropTypes.string,
  /** Size of the logo */
  size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
  /** Shape of the logo */
  shape: PropTypes.oneOf(['normal', 'rounded', 'squared']),
  /** Background option */
  background: PropTypes.oneOf(['none', 'palette', 'custom']),
  /** Custom background color when background is set to 'custom' */
  customBackgroundColor: PropTypes.string,
  /** Additional CSS classes */
  className: PropTypes.string,
  /** Inline styles */
  style: PropTypes.object,
};

----
// src/stories/Atoms/Logo/Logo.stories.jsx
import React from 'react';
import { Logo } from './Logo';
import './Logo.css';

export default {
  title: 'Atoms/Media/Logo',
  component: Logo,
  argTypes: {
    src: {
      control: 'text',
      description: 'Source URL or path of the logo image.',
    },
    alt: {
      control: 'text',
      description: 'Alternative text for the logo.',
    },
    size: {
      control: {
        type: 'select',
        options: ['xs', 'sm', 'md', 'lg', 'xl'],
      },
      description: 'Size of the logo.',
    },
    shape: {
      control: {
        type: 'select',
        options: ['normal', 'rounded', 'squared'],
      },
      description: 'Shape of the logo.',
    },
    background: {
      control: {
        type: 'select',
        options: ['none', 'palette', 'custom'],
      },
      description: 'Background option.',
    },
    customBackgroundColor: {
      control: 'color',
      description: 'Custom background color when background is set to "custom".',
    },
    className: {
      control: 'text',
      description: 'Additional CSS classes.',
    },
    style: {
      control: 'object',
      description: 'Inline styles.',
    },
  },
};

/**
 * Original Logo - Medium Size - Normal Shape - No Background
 */
export const OriginalMediumNormalNoBg = () => (
  <Logo
    src="https://via.placeholder.com/150x150?text=Logo"
    alt="Original Logo"
    size="md"
    shape="normal"
    background="none"
  />
);

/**
 * Logo with Palette Background - Large Size - Rounded Shape
 */
export const PaletteBackgroundLargeRounded = () => (
  <Logo
    src="https://via.placeholder.com/150x150?text=Logo"
    alt="Logo with Palette Background"
    size="lg"
    shape="rounded"
    background="palette"
  />
);

/**
 * Logo with Custom Background - Small Size - Squared Shape
 */
export const CustomBackgroundSmallSquared = () => (
  <Logo
    src="https://via.placeholder.com/150x150?text=Logo"
    alt="Logo with Custom Background"
    size="sm"
    shape="squared"
    background="custom"
    customBackgroundColor="#FF5733"
  />
);

/**
 * Original Logo - Extra Large Size - Rounded Shape - No Background
 */
export const OriginalXLRoundedNoBg = () => (
  <Logo
    src="https://via.placeholder.com/150x150?text=Logo"
    alt="Original XL Logo"
    size="xl"
    shape="rounded"
    background="none"
  />
);

/**
 * Interactive Logo
 */
const Template = (args) => <Logo {...args} />;

export const InteractiveLogo = Template.bind({});
InteractiveLogo.args = {
  src: 'https://via.placeholder.com/150x150?text=Logo',
  alt: 'Interactive Logo',
  size: 'md',
  shape: 'normal',
  background: 'none',
  customBackgroundColor: '#00FF00',
};

-----

/* src/stories/Atoms/Paragraph/Paragraph.css */

.paragraph {
  font-family: var(--font-family);
  margin-bottom: var(--spacing-md);
}

/* Size Variants */
.paragraph--size-xs {
  font-size: var(--font-size-small);
}

.paragraph--size-sm {
  font-size: calc(var(--font-size-small) * 1.1);
}

.paragraph--size-md {
  font-size: var(--font-size-base);
}

.paragraph--size-lg {
  font-size: calc(var(--font-size-base) * 1.1);
}

.paragraph--size-xl {
  font-size: calc(var(--font-size-base) * 1.25);
}

/* Text Alignment */
.paragraph--align-left {
  text-align: left;
}

.paragraph--align-center {
  text-align: center;
}

.paragraph--align-right {
  text-align: right;
}

.paragraph--align-justify {
  text-align: justify;
}

/* Font Weight */
.paragraph--weight-light {
  font-weight: 300;
}

.paragraph--weight-normal {
  font-weight: var(--font-weight-regular);
}

.paragraph--weight-bold {
  font-weight: var(--font-weight-bold);
}

/* Text Colors */
.paragraph--color-default {
  color: var(--text-color);
}

.paragraph--color-muted {
  color: var(--muted-text-color);
}

.paragraph--color-primary {
  color: var(--primary-color);
}

.paragraph--color-secondary {
  color: var(--secondary-color);
}

.paragraph--color-info {
  color: var(--info-color);
}

.paragraph--color-warning {
  color: var(--warning-color);
}

.paragraph--color-alert {
  color: var(--alert-color);
}

.paragraph--color-success {
  color: var(--success-color);
}

.paragraph--color-dark {
  color: var(--dark-color);
}

.paragraph--color-neutral {
  color: var(--neutral-color);
}

/* Classy Palette */
.paragraph--color-classy-color-1 {
  color: var(--classy-color-1);
}

.paragraph--color-classy-color-2 {
  color: var(--classy-color-2);
}

.paragraph--color-classy-color-3 {
  color: var(--classy-color-3);
}

.paragraph--color-classy-color-4 {
  color: var(--classy-color-4);
}

.paragraph--color-classy-color-5 {
  color: var(--classy-color-5);
}

/* Small Switch Palette */
.paragraph--color-small-switch-color-1 {
  color: var(--small-switch-color-1);
}

.paragraph--color-small-switch-color-2 {
  color: var(--small-switch-color-2);
}

/* Natural Palette */
.paragraph--color-natural-color-1 {
  color: var(--natural-color-1);
}

.paragraph--color-natural-color-2 {
  color: var(--natural-color-2);
}

.paragraph--color-natural-color-3 {
  color: var(--natural-color-3);
}

/* Grey Friends */
.paragraph--color-grey-friend-1 {
  color: var(--grey-friend-1);
}

.paragraph--color-grey-friend-2 {
  color: var(--grey-friend-2);
}

/* Shades */
.paragraph--color-shade-1 {
  color: var(--shade-1);
}

.paragraph--color-shade-2 {
  color: var(--shade-2);
}

.paragraph--color-shade-3 {
  color: var(--shade-3);
}

.paragraph--color-shade-4 {
  color: var(--shade-4);
}

/* Line Height */
.paragraph--lineHeight-normal {
  line-height: var(--line-height);
}

.paragraph--lineHeight-tight {
  line-height: 1.3;
}

.paragraph--lineHeight-loose {
  line-height: 2;
}

---

// src/stories/Atoms/Paragraph/Paragraph.jsx
import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import './Paragraph.css';

export const Paragraph = ({
  text,
  size = 'md', // 'xs', 'sm', 'md', 'lg', 'xl'
  alignment = 'left', // 'left', 'center', 'right', 'justify'
  weight = 'normal', // 'light', 'normal', 'bold'
  color = 'default', // All color options, including the new semantic and palette options
  lineHeight = 'normal', // 'normal', 'tight', 'loose'
  className = '',
  style = {},
  ...props
}) => {
  const paragraphClasses = classNames('paragraph', className, {
    [`paragraph--size-${size}`]: size,
    [`paragraph--align-${alignment}`]: alignment,
    [`paragraph--weight-${weight}`]: weight,
    [`paragraph--color-${color}`]: color,
    [`paragraph--lineHeight-${lineHeight}`]: lineHeight,
  });

  return (
    <p className={paragraphClasses} style={style} {...props}>
      {text}
    </p>
  );
};

Paragraph.propTypes = {
  /** Text content for the paragraph */
  text: PropTypes.string.isRequired,
  /** Size of the paragraph text */
  size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
  /** Text alignment */
  alignment: PropTypes.oneOf(['left', 'center', 'right', 'justify']),
  /** Font weight */
  weight: PropTypes.oneOf(['light', 'normal', 'bold']),
  /** Text color */
  color: PropTypes.oneOf([
    'default',
    'muted',
    'primary',
    'secondary',
    'info',
    'warning',
    'alert',
    'success',
    'dark',
    'neutral',
    'classy-color-1',
    'classy-color-2',
    'classy-color-3',
    'classy-color-4',
    'classy-color-5',
    'small-switch-color-1',
    'small-switch-color-2',
    'natural-color-1',
    'natural-color-2',
    'natural-color-3',
    'grey-friend-1',
    'grey-friend-2',
    'shade-1',
    'shade-2',
    'shade-3',
    'shade-4',
  ]),
  /** Line height */
  lineHeight: PropTypes.oneOf(['normal', 'tight', 'loose']),
  /** Additional CSS classes */
  className: PropTypes.string,
  /** Inline styles */
  style: PropTypes.object,
};

----

// src/stories/Atoms/Paragraph/Paragraph.stories.jsx
import React from 'react';
import { Paragraph } from './Paragraph';
import './Paragraph.css';

export default {
  title: 'Atoms/Text/Paragraph',
  component: Paragraph,
  argTypes: {
    text: {
      control: 'text',
      description: 'Text content for the paragraph.',
    },
    size: {
      control: {
        type: 'select',
        options: ['xs', 'sm', 'md', 'lg', 'xl'],
      },
      description: 'Size of the paragraph text.',
    },
    alignment: {
      control: {
        type: 'select',
        options: ['left', 'center', 'right', 'justify'],
      },
      description: 'Text alignment.',
    },
    weight: {
      control: {
        type: 'select',
        options: ['light', 'normal', 'bold'],
      },
      description: 'Font weight.',
    },
    color: {
      control: {
        type: 'select',
        options: [
          'default',
          'muted',
          'primary',
          'secondary',
          'info',
          'warning',
          'alert',
          'success',
          'dark',
          'neutral',
          'classy-color-1',
          'classy-color-2',
          'classy-color-3',
          'classy-color-4',
          'classy-color-5',
          'small-switch-color-1',
          'small-switch-color-2',
          'natural-color-1',
          'natural-color-2',
          'natural-color-3',
          'grey-friend-1',
          'grey-friend-2',
          'shade-1',
          'shade-2',
          'shade-3',
          'shade-4',
        ],
      },
      description: 'Text color.',
    },
    lineHeight: {
      control: {
        type: 'select',
        options: ['normal', 'tight', 'loose'],
      },
      description: 'Line height of the paragraph.',
    },
    className: {
      control: 'text',
      description: 'Additional CSS classes.',
    },
    style: {
      control: 'object',
      description: 'Inline styles.',
    },
  },
};

/**
 * Default Paragraph
 */
export const DefaultParagraph = () => (
  <Paragraph text="This is a default paragraph with medium size and left alignment." />
);

/**
 * Large Bold Centered Paragraph
 */
export const LargeBoldCentered = () => (
  <Paragraph
    text="This is a large, bold, and centered paragraph."
    size="lg"
    weight="bold"
    alignment="center"
    color="primary"
  />
);

/**
 * Small Muted Paragraph with Tight Line Height
 */
export const SmallMutedTight = () => (
  <Paragraph
    text="This is a small, muted paragraph with tight line height."
    size="sm"
    color="muted"
    lineHeight="tight"
  />
);

/**
 * Paragraph with Justify Alignment and Secondary Color
 */
export const JustifySecondary = () => (
  <Paragraph
    text="This paragraph is justified and has secondary color."
    alignment="justify"
    color="secondary"
  />
);

/**
 * Interactive Paragraph
 */
const Template = (args) => <Paragraph {...args} />;

export const InteractiveParagraph = Template.bind({});
InteractiveParagraph.args = {
  text: 'This is an interactive paragraph.',
  size: 'md',
  alignment: 'left',
  weight: 'normal',
  color: 'default',
  lineHeight: 'normal',
};

-----


this is an ethe meta data of the components:

const Atomic = {
    "Atomic": {
    "Text": [
      { name: "Heading", paths: { css: "./Heading/Heading.css", globalCss: "styles/global.css", jsx: "./Heading/Heading.jsx", stories: "./Heading/Heading.stories.jsx" }},
      { name: "Paragraph", paths: { css: "./Paragraph/Paragraph.css", globalCss: "styles/global.css", jsx: "./Paragraph/Paragraph.jsx", stories: "./Paragraph/Paragraph.stories.jsx" }},
      { name: "Label", paths: { css: "./Label/Label.css", globalCss: "styles/global.css", jsx: "./Label/Label.jsx", stories: "./Label/Label.stories.jsx" }},
      { name: "Caption", paths: { css: "./Caption/Caption.css", globalCss: "styles/global.css", jsx: "./Caption/Caption.jsx", stories: "./Caption/Caption.stories.jsx" }},
    ],
    "Layout": [
      { name: " Container", paths: { css: "./Container/Container.css", globalCss: "styles/global.css", jsx: "./Container/Container.jsx", stories: "./Container/Container.stories.jsx" }},
    ],
    "Interactive": [
      { name: "Button", paths: { css: "/Button/Button.css", globalCss: "styles/global.css", jsx: "./Button/Button.jsx", stories: "./Button/Button.stories.jsx" }},
      { name: "Link", paths: { css: "Atomic/Link/Link.css", globalCss: "styles/global.css", jsx: "./Link/Link.jsx", stories: "./Link/Link.stories.jsx" }},
      { name: "Icon", paths: { css: "/Atomic/Icon/Icon.css", globalCss: "styles/global.css", jsx: "./Icon/Icon.jsx", stories: "./Icon/Icon.stories.jsx" }},
      { name: "Checkbox", paths: { css: "./Checkbox/Checkbox.css", globalCss: "styles/global.css", jsx: "./Checkbox/Checkbox.jsx", stories: "./Checkbox/Checkbox.stories.jsx" }},
      { name: "RadioButton", paths: { css: "./RadioButton/RadioButton.css", globalCss: "styles/global.css", jsx: "./RadioButton/RadioButton.jsx", stories: "./RadioButton/RadioButton.stories.jsx" }},
      { name: "Toggle", paths: { css: "./Toggle/Toggle.css", globalCss: "styles/global.css", jsx: "./Toggle/Toggle.jsx", stories: "./Toggle/Toggle.stories.jsx" }},
      { name: "TextInput", paths: { css: "./TextInput/TextInput.css", globalCss: "styles/global.css", jsx: "./TextInput/TextInput.jsx", stories: "./TextInput/TextInput.stories.jsx" }},
      { name: "TextArea", paths: { css: "./TextArea/TextArea.css", globalCss: "styles/global.css", jsx: "./TextArea/TextArea.jsx", stories: "./TextArea/TextArea.stories.jsx" }},
      { name: "Select", paths: { css: "./Select/Select.css", globalCss: "styles/global.css", jsx: "./Select/Select.jsx", stories: "./Select/Select.stories.jsx" }},
      { name: "Slider", paths: { css: "./Slider/Slider.css", globalCss: "styles/global.css", jsx: "./Slider/Slider.jsx", stories: "./Slider/Slider.stories.jsx" }},
      { name: "RangeInput", paths: { css: "./RangeInput/RangeInput.css", globalCss: "styles/global.css", jsx: "./RangeInput/RangeInput.jsx", stories: "./RangeInput/RangeInput.stories.jsx" }},
    ],
    "Media": [
      { name: "Image", paths: { css: "./Image/Image.css", globalCss: "styles/global.css", jsx: "./Image/Image.jsx", stories: "./Image/Image.stories.jsx" }},
      { name: "Video", paths: { css: "./Video/Video.css", globalCss: "styles/global.css", jsx: "./Video/Video.jsx", stories: "./Video/Video.stories.jsx" }},
      { name: "Audio", paths: { css: "./Audio/Audio.css", globalCss: "styles/global.css", jsx: "./Audio/Audio.jsx", stories: "./Audio/Audio.stories.jsx" }},
      { name: "Icon", paths: { css: "./Icon/Icon.css", globalCss: "styles/global.css", jsx: "./Icon/Icon.jsx", stories: "./Icon/Icon.stories.jsx" }},
    ],
    "Visual": [
      { name: "Divider", paths: { css: "./Divider/Divider.css", globalCss: "styles/global.css", jsx: "./Divider/Divider.jsx", stories: "./Divider/Divider.stories.jsx" }},
      { name: "Spacer", paths: { css: "./Spacer/Spacer.css", globalCss: "styles/global.css", jsx: "./Spacer/Spacer.jsx", stories: "./Spacer/Spacer.stories.jsx" }},
      { name: "Tooltip", paths: { css: "./Tooltip/Tooltip.css", globalCss: "styles/global.css", jsx: "./Tooltip/Tooltip.jsx", stories: "./Tooltip/Tooltip.stories.jsx" }},
      { name: "Badge", paths: { css: "./Badge/Badge.css", globalCss: "styles/global.css", jsx: "./Badge/Badge.jsx", stories: "./Badge/Badge.stories.jsx" }},
      { name: "Tag", paths: { css: "./Tag/Tag.css", globalCss: "styles/global.css", jsx: "./Tag/Tag.jsx", stories: "./Tag/Tag.stories.jsx" }},
    ],
    "Feedback": [
      { name: "Loader", paths: { css: "./Loader/Loader.css", globalCss: "styles/global.css", jsx: "./Loader/Loader.jsx", stories: "./Loader/Loader.stories.jsx" }},
      { name: "Spinner", paths: { css: "./Spinner/Spinner.css", globalCss: "styles/global.css", jsx: "./Spinner/Spinner.jsx", stories: "./Spinner/Spinner.stories.jsx" }},
      { name: "ProgressBar", paths: { css: "./ProgressBar/ProgressBar.css", globalCss: "styles/global.css", jsx: "./ProgressBar/ProgressBar.jsx", stories: "./ProgressBar/ProgressBar.stories.jsx" }},
      { name: "Alert", paths: { css: "./Alert/Alert.css", globalCss: "styles/global.css", jsx: "./Alert/Alert.jsx", stories: "./Alert/Alert.stories.jsx" }},
      { name: "Snackbar", paths: { css: "./Snackbar/Snackbar.css", globalCss: "styles/global.css", jsx: "./Snackbar/Snackbar.jsx", stories: "./Snackbar/Snackbar.stories.jsx" }},
    ]
  }
}

export default Atomic;

----
//this.GUI/src/stories/Atoms/index.js
// Import all components directly
import { Heading } from './Heading/Heading';
import { Paragraph } from './Paragraph/Paragraph';
import { Label } from './Label/Label';
import { Caption } from './Caption/Caption';
import { Container } from './Container/Container';
import { Button } from './Button/Button';
import { Link } from './Link/Link';
import { Icon } from './Icon/Icon';
import { Checkbox } from './Checkbox/Checkbox';
import { RadioButton } from './RadioButton/RadioButton';
import { Toggle } from './Toggle/Toggle';
import { TextInput } from './TextInput/TextInput';
import { TextArea } from './TextArea/TextArea';
import { Select } from './Select/Select';
import { Slider } from './Slider/Slider';
import { RangeInput } from './RangeInput/RangeInput';
import { Image } from './Image/Image';
import { Video } from './Video/Video';
import { Audio } from './Audio/Audio';
import { Divider } from './Divider/Divider';
import { Spacer } from './Spacer/Spacer';
import { Tooltip } from './Tooltip/Tooltip';
import { Badge } from './Badge/Badge';
import { Tag } from './Tag/Tag';
import { Loader } from './Loader/Loader';
import { Spinner } from './Spinner/Spinner';
import { ProgressBar } from './ProgressBar/ProgressBar';
import { Alert } from './Alert/Alert';
import { Snackbar } from './Snackbar/Snackbar';
import { Logo } from './Logo/Logo'; 

// Flattened export of all components
const Atoms = {
  Heading,
  Paragraph,
  Label,
  Caption,
  Container,
  Button,
  Link,
  Icon,
  Checkbox,
  RadioButton,
  Toggle,
  TextInput,
  TextArea,
  Select,
  Slider,
  RangeInput,
  Image,
  Video,
  Audio,
  Divider,
  Spacer,
  Tooltip,
  Badge,
  Tag,
  Loader,
  Logo,
  Spinner,
  ProgressBar,
  Alert,
  Snackbar,
};

export default Atoms;

---

const Layout = {
  "Layout": {
    "Grid": [
      { name: "Grid", paths: { css: "./Grid/Grid.css", globalCss: "styles/global.css", jsx: "./Layout/Grid/Grid.jsx", stories: "src/stories/Layout/Grid/Grid.stories.jsx" }},
    ],
    "Section": [
      { name: "Section", paths: { css: "./Section/Section.css", globalCss: "styles/global.css", jsx: "./Layout/Section/Section.jsx", stories: "src/stories/Layout/Section/Section.stories.jsx" }},
    ],
    "FlexboxLayout": [
      { name: "Flexbox", paths: { css: "./Flexbox/Flexbox.css", globalCss: "styles/global.css", jsx: "./Layout/Flexbox/Flexbox.jsx", stories: "src/stories/Layout/Flexbox/Flexbox.stories.jsx" }},
    ],
    "NavigationAndMenus": [
      { name: "Header", paths: { css: "./Header/Header.css", globalCss: "styles/global.css", jsx: "./Layout/Header/Header.jsx", stories: "src/stories/Layout/Header/Header.stories.jsx" }},
      { name: "Footer", paths: { css: "./Footer/Footer.css", globalCss: "styles/global.css", jsx: "./Layout/Footer/Footer.jsx", stories: "src/stories/Layout/Footer/Footer.stories.jsx" }},
      { name: "DropdownMenu", paths: { css: "./DropdownMenu/DropdownMenu.css", globalCss: "styles/global.css", jsx: "./Layout/DropdownMenu/DropdownMenu.jsx", stories: "src/stories/Layout/DropdownMenu/DropdownMenu.stories.jsx" }},
      { name: "Pagination", paths: { css: "./Pagination/Pagination.css", globalCss: "styles/global.css", jsx: "./Layout/Pagination/Pagination.jsx", stories: "src/stories/Layout/Pagination/Pagination.stories.jsx" }},
    ],
    "ContentOrganization": [
      { name: "Sidebar", paths: { css: "./Sidebar/Sidebar.css", globalCss: "styles/global.css", jsx: "./Layout/Sidebar/Sidebar.jsx", stories: "src/stories/Layout/Sidebar/Sidebar.stories.jsx" }},
      { name: "Tabs", paths: { css: "./Tabs/Tabs.css", globalCss: "styles/global.css", jsx: "./Layout/Tabs/Tabs.jsx", stories: "src/stories/Layout/Tabs/Tabs.stories.jsx" }},
      { name: "Accordion", paths: { css: "./Accordion/Accordion.css", globalCss: "styles/global.css", jsx: "./Layout/Accordion/Accordion.jsx", stories: "src/stories/Layout/Accordion/Accordion.stories.jsx" }},
    ],
    "HeroSections": [
      { name: "HeroBanner", paths: { css: "./HeroBanner/HeroBanner.css", globalCss: "styles/global.css", jsx: "./Layout/HeroBanner/HeroBanner.jsx", stories: "src/stories/Layout/HeroBanner/HeroBanner.stories.jsx" }},
      { name: "HeroImageVideo", paths: { css: "./HeroImageVideo/HeroImageVideo.css", globalCss: "styles/global.css", jsx: "./Layout/HeroImageVideo/HeroImageVideo.jsx", stories: "src/stories/Layout/HeroImageVideo/HeroImageVideo.stories.jsx" }},
    ]
  }
};

// Export the Layout object
export default Layout;

---

// this.GUI/src/stories/Layouts/index.js
import { Grid } from './Grid/Grid';
import { Section } from './Section/Section';
import { Flexbox } from './Flexbox/Flexbox';
import { Header } from './Header/Header';
import { Footer } from './Footer/Footer';
import { DropdownMenu } from './DropdownMenu/DropdownMenu';
import { Pagination } from './Pagination/Pagination';
import { Sidebar } from './Sidebar/Sidebar';
import { Tabs } from './Tabs/Tabs';
import { Accordion } from './Accordion/Accordion';
import { HeroBanner } from './HeroBanner/HeroBanner';
import { HeroImageVideo } from './HeroImageVideo/HeroImageVideo';

// Flattened export of all layout components
const Layouts = {
  Grid,
  Section,
  Flexbox,
  Header,
  Footer,
  DropdownMenu,
  Pagination,
  Sidebar,
  Tabs,
  Accordion,
  HeroBanner,
  HeroImageVideo,
};

export default Layouts;
---

const Molecules = {
  "Molecules": {
    "Navigation": [
      { name: "Navbar", paths: { css: "./Navbar/Navbar.css", globalCss: "styles/global.css", jsx: "./Navbar/Navbar.jsx", stories: "./Navbar/Navbar.stories.jsx" }},
      { name: "Sidebar", paths: { css: "./Sidebar/Sidebar.css", globalCss: "styles/global.css", jsx: "./Sidebar/Sidebar.jsx", stories: "./Sidebar/Sidebar.stories.jsx" }},
      { name: "Breadcrumbs", paths: { css: "./Breadcrumbs/Breadcrumbs.css", globalCss: "styles/global.css", jsx: "./Breadcrumbs/Breadcrumbs.jsx", stories: "./Breadcrumbs/Breadcrumbs.stories.jsx" }},
    ],
    "FormElements": [
      { name: "InputGroup ", paths: { css: "./InputGroup/InputGroup.css", globalCss: "styles/global.css", jsx: "./InputGroup/InputGroup.jsx", stories: "src/stories/Molecules/InputGroup/InputGroup.stories.jsx" }},
      { name: "InputWithLabel", paths: { css: "./InputWithLabel/InputWithLabel.css", globalCss: "styles/global.css", jsx: "./InputWithLabel/InputWithLabel.jsx", stories: "src/stories/Molecules/InputWithLabel/InputWithLabel.stories.jsx" }},
      { name: "SearchBar", paths: { css: "./SearchBar/SearchBar.css", globalCss: "styles/global.css", jsx: "./SearchBar/SearchBar.jsx", stories: "src/stories/Molecules/SearchBar/SearchBar.stories.jsx" }},
      { name: "FileUpload", paths: { css: "./FileUpload/FileUpload.css", globalCss: "styles/global.css", jsx: "./FileUpload/FileUpload.jsx", stories: "src/stories/Molecules/FileUpload/FileUpload.stories.jsx" }},
      { name: "FormField", paths: { css: "./FormField/FormField.css", globalCss: "styles/global.css", jsx: "./FormField/FormField.jsx", stories: "src/stories/Molecules/FormField/FormField.stories.jsx" }},
    ],
    "ButtonsWithIcons": [
      { name: "IconButton", paths: { css: "./IconButton/IconButton.css", globalCss: "styles/global.css", jsx: "./IconButton/IconButton.jsx", stories: "src/stories/Molecules/IconButton/IconButton.stories.jsx" }},
      { name: "ButtonGroup", paths: { css: "./ButtonGroup/ButtonGroup.css", globalCss: "styles/global.css", jsx: "./ButtonGroup/ButtonGroup.jsx", stories: "src/stories/Molecules/ButtonGroup/ButtonGroup.stories.jsx" }},
    ],
    "MediaMolecules": [
      { name: "ImageWithCaption", paths: { css: "./ImageWithCaption/ImageWithCaption.css", globalCss: "styles/global.css", jsx: "./ImageWithCaption/ImageWithCaption.jsx", stories: "src/stories/Molecules/ImageWithCaption/ImageWithCaption.stories.jsx" }},
      { name: "VideoWithDescription", paths: { css: "./VideoWithDescription/VideoWithDescription.css", globalCss: "styles/global.css", jsx: "./VideoWithDescription/VideoWithDescription.jsx", stories: "src/stories/Molecules/VideoWithDescription/VideoWithDescription.stories.jsx" }},
      { name: "AvatarWithName", paths: { css: "./AvatarWithName/AvatarWithName.css", globalCss: "styles/global.css", jsx: "./AvatarWithName/AvatarWithName.jsx", stories: "src/stories/Molecules/AvatarWithName/AvatarWithName.stories.jsx" }},
      { name: "AudioPlayer", paths: { css: "./AudioPlayer/AudioPlayer.css", globalCss: "styles/global.css", jsx: "./AudioPlayer/AudioPlayer.jsx", stories: "src/stories/Molecules/AudioPlayer/AudioPlayer.stories.jsx" }},
    ],
    "ContentDisplay": [
      { name: "SelectTheme", paths: { css: "./SelectTheme/SelectTheme.css", globalCss: "styles/global.css", jsx: "./SelectTheme/SelectTheme.jsx", stories: "src/stories/Molecules/SelectTheme/SelectTheme.stories.jsx" }},
      { name: "Card", paths: { css: "./Card/Card.css", globalCss: "styles/global.css", jsx: "./Card/Card.jsx", stories: "./Card/Card.stories.jsx" }},
      { name: "MediaCard", paths: { css: "./MediaCard/MediaCard.css", globalCss: "styles/global.css", jsx: "./MediaCard/MediaCard.jsx", stories: "./MediaCard/MediaCard.stories.jsx" }},
      { name: "List", paths: { css: "./List/List.css", globalCss: "styles/global.css", jsx: "./List/List.jsx", stories: "./List/List.stories.jsx" }},
      { name: "Accordion", paths: { css: "./Accordion/Accordion.css", globalCss: "styles/global.css", jsx: "./Accordion/Accordion.jsx", stories: "./Accordion/Accordion.stories.jsx" }},
    ],
    "FeedbackMolecules": [
      { name: "Notification", paths: { css: "./Notification/Notification.css", globalCss: "styles/global.css", jsx: "./Notification/Notification.jsx", stories: "src/stories/Molecules/Notification/Notification.stories.jsx" }},
      { name: "Modal", paths: { css: "./Modal/Modal.css", globalCss: "styles/global.css", jsx: "./Modal/Modal.jsx", stories: "src/stories/Molecules/Modal/Modal.stories.jsx" }},
    ],
    "Tables": [
      { name: "DataTable", paths: { css: "./DataTable/DataTable.css", globalCss: "styles/global.css", jsx: "./DataTable/DataTable.jsx", stories: "./DataTable/DataTable.stories.jsx" }},
      { name: "PricingTable", paths: { css: "./PricingTable/PricingTable.css", globalCss: "styles/global.css", jsx: "./PricingTable/PricingTable.jsx", stories: "./PricingTable/PricingTable.stories.jsx" }},
      { name: "ComparisonTable", paths: { css: "./ComparisonTable/ComparisonTable.css", globalCss: "styles/global.css", jsx: "./ComparisonTable/ComparisonTable.jsx", stories: "./ComparisonTable/ComparisonTable.stories.jsx" }},
    ]
  }
}

export default Molecules;

---

// src/stories/Molecules/index.js

// Import all components as named exports
import { Navbar } from './Navbar/Navbar';
import { Sidebar } from './Sidebar/Sidebar';
import { Breadcrumbs } from './Breadcrumbs/Breadcrumbs';
import { InputGroup } from './InputGroup/InputGroup';
import { InputWithLabel } from './InputWithLabel/InputWithLabel';
import { SearchBar } from './SearchBar/SearchBar';
import { FileUpload } from './FileUpload/FileUpload';
import { FormField } from './FormField/FormField';
import { IconButton } from './IconButton/IconButton';
import { ButtonGroup } from './ButtonGroup/ButtonGroup';
import { ImageWithCaption } from './ImageWithCaption/ImageWithCaption';
import { VideoWithDescription } from './VideoWithDescription/VideoWithDescription';
import { AvatarWithName } from './AvatarWithName/AvatarWithName';
import { AudioPlayer } from './AudioPlayer/AudioPlayer';
import { Card } from './Card/Card';
import { MediaCard } from './MediaCard/MediaCard';
import { List } from './List/List';
import { Accordion } from './Accordion/Accordion';
import { Notification } from './Notification/Notification';
import { Modal } from './Modal/Modal';
import { DataTable } from './DataTable/DataTable';
import { PricingTable } from './PricingTable/PricingTable';
import { ComparisonTable } from './ComparisonTable/ComparisonTable';
import { SelectTheme } from './SelectTheme/SelectTheme'; 

// Flattened export of all components
const Molecules = {
  Navbar,
  Sidebar,
  Breadcrumbs,
  InputGroup,
  InputWithLabel,
  SearchBar,
  SelectTheme,  
  FileUpload,
  FormField,
  IconButton,
  ButtonGroup,
  ImageWithCaption,
  VideoWithDescription,
  AvatarWithName,
  AudioPlayer,
  Card,
  MediaCard,
  List,
  Accordion,
  Notification,
  Modal,
  DataTable,
  PricingTable,
  ComparisonTable,
};

export default Molecules;

---

const organisms = {
  "Organisms": {
    "Forms": [
      { name: "SignInForm", paths: { css: "./SignInForm/SignInForm.css", globalCss: "styles/global.css", jsx: "./SignInForm/SignInForm.jsx", stories: "./SignInForm/SignInForm.stories.jsx" }},
      { name: "RegistrationForm", paths: { css: "./RegistrationForm/RegistrationForm.css", globalCss: "styles/global.css", jsx: "./RegistrationForm/RegistrationForm.jsx", stories: "./RegistrationForm/RegistrationForm.stories.jsx" }},
      { name: "ContactForm", paths: { css: "./ContactForm/ContactForm.css", globalCss: "styles/global.css", jsx: "./ContactForm/ContactForm.jsx", stories: "./ContactForm/ContactForm.stories.jsx" }},
    ],
    
    "ContentDisplay": [
      { name: "ProfileCard", paths: { css: "./ProfileCard/ProfileCard.css", globalCss: "styles/global.css", jsx: "./ProfileCard/ProfileCard.jsx", stories: "./ProfileCard/ProfileCard.stories.jsx" }},
      { name: "ProductDetail", paths: { css: "./ProductDetail/ProductDetail.css", globalCss: "styles/global.css", jsx: "./ProductDetail/ProductDetail.jsx", stories: "./ProductDetail/ProductDetail.stories.jsx" }},
      { name: "ArticleContent", paths: { css: "./ArticleContent/ArticleContent.css", globalCss: "styles/global.css", jsx: "./ArticleContent/ArticleContent.jsx", stories: "./ArticleContent/ArticleContent.stories.jsx" }},
    ],
    
    "MediaCollections": [
      { name: "ImageGallery", paths: { css: "./ImageGallery/ImageGallery.css", globalCss: "styles/global.css", jsx: "./ImageGallery/ImageGallery.jsx", stories: "./ImageGallery/ImageGallery.stories.jsx" }},
      { name: "VideoPlaylist", paths: { css: "./VideoPlaylist/VideoPlaylist.css", globalCss: "styles/global.css", jsx: "./VideoPlaylist/VideoPlaylist.jsx", stories: "./VideoPlaylist/VideoPlaylist.stories.jsx" }},
      { name: "Carousel", paths: { css: "./Carousel/Carousel.css", globalCss: "styles/global.css", jsx: "./Carousel/Carousel.jsx", stories: "./Carousel/Carousel.stories.jsx" }},
    ],
    
    "Interactive": [
      { name: "ShoppingCart", paths: { css: "./ShoppingCart/ShoppingCart.css", globalCss: "styles/global.css", jsx: "./ShoppingCart/ShoppingCart.jsx", stories: "./ShoppingCart/ShoppingCart.stories.jsx" }},
      { name: "UserProfile", paths: { css: "./UserProfile/UserProfile.css", globalCss: "styles/global.css", jsx: "./UserProfile/UserProfile.jsx", stories: "./UserProfile/UserProfile.stories.jsx" }},
      { name: "Checkout", paths: { css: "./Checkout/Checkout.css", globalCss: "styles/global.css", jsx: "./Checkout/Checkout.jsx", stories: "./Checkout/Checkout.stories.jsx" }},
    ],
    
    "MediaCollections": [
      { name: "ImageGallery", paths: { css: "./ImageGallery/ImageGallery.css", globalCss: "styles/global.css", jsx: "./ImageGallery/ImageGallery.jsx", stories: "./ImageGallery/ImageGallery.stories.jsx" }},
      { name: "VideoPlaylist", paths: { css: "./VideoPlaylist/VideoPlaylist.css", globalCss: "styles/global.css", jsx: "./VideoPlaylist/VideoPlaylist.jsx", stories: "./VideoPlaylist/VideoPlaylist.stories.jsx" }},
      { name: "Carousel", paths: { css: "./Carousel/Carousel.css", globalCss: "styles/global.css", jsx: "./Carousel/Carousel.jsx", stories: "./Carousel/Carousel.stories.jsx" }},
    ],

    "Feedback": [
      { name: "UserNotification", paths: { css: "./UserNotification/UserNotification.css", globalCss: "styles/global.css", jsx: "./UserNotification/UserNotification.jsx", stories: "./UserNotification/UserNotification.stories.jsx" }},
      { name: "StatusBanner", paths: { css: "./StatusBanner/StatusBanner.css", globalCss: "styles/global.css", jsx: "./StatusBanner/StatusBanner.jsx", stories: "./StatusBanner/StatusBanner.stories.jsx" }},
      { name: "AlertSystem", paths: { css: "./AlertSystem/AlertSystem.css", globalCss: "styles/global.css", jsx: "./AlertSystem/AlertSystem.jsx", stories: "./AlertSystem/AlertSystem.stories.jsx" }},
    ]
  }
}

---

// Import all template components directly from their root-level directories
import { AdminDashboard } from './AdminDashboard/AdminDashboard';
import { SidebarTopNav } from './SidebarTopNav/SidebarTopNav';
import { ProductPage } from './ProductPage/ProductPage';
import { ShoppingCart } from './ShoppingCart/ShoppingCart';
import { SignInPage } from './SignInPage/SignInPage';
import { RegistrationPage } from './RegistrationPage/RegistrationPage';
import { HeroSection } from './HeroSection/HeroSection';
import { FeaturesList } from './FeaturesList/FeaturesList';
import { CallToAction } from './CallToAction/CallToAction';
import { Testimonials } from './Testimonials/Testimonials';
import { FormSection } from './FormSection/FormSection';
import { LocationInfo } from './LocationInfo/LocationInfo';
import { SocialMediaLinks } from './SocialMediaLinks/SocialMediaLinks';

// Export all templates under a single object for easier import
const Templates = {
  AdminDashboard,
  SidebarTopNav,
  ProductPage,
  ShoppingCart,
  SignInPage,
  RegistrationPage,
  HeroSection,
  FeaturesList,
  CallToAction,
  Testimonials,
  FormSection,
  LocationInfo,
  SocialMediaLinks,
};

export default Templates;

---

const Templates = {
"Templates": {
    "LandingPages": [
      { name: "HeroSection", paths: { css: "styles/Templates/LandingPages/HeroSection.css", globalCss: "styles/global.css", jsx: "src/components/Templates/LandingPages/HeroSection.jsx", stories: "src/stories/Templates/LandingPages/HeroSection.stories.jsx" }},
      { name: "FeaturesList", paths: { css: "styles/Templates/LandingPages/FeaturesList.css", globalCss: "styles/global.css", jsx: "src/components/Templates/LandingPages/FeaturesList.jsx", stories: "src/stories/Templates/LandingPages/FeaturesList.stories.jsx" }},
      { name: "CallToAction", paths: { css: "styles/Templates/LandingPages/CallToAction.css", globalCss: "styles/global.css", jsx: "src/components/Templates/LandingPages/CallToAction.jsx", stories: "src/stories/Templates/LandingPages/CallToAction.stories.jsx" }},
      { name: "Testimonials", paths: { css: "styles/Templates/LandingPages/Testimonials.css", globalCss: "styles/global.css", jsx: "src/components/Templates/LandingPages/Testimonials.jsx", stories: "src/stories/Templates/LandingPages/Testimonials.stories.jsx" }},
    ],
    "DashboardLayouts": [
      { name: "AdminDashboard", paths: { css: "styles/Templates/DashboardLayouts/AdminDashboard.css", globalCss: "styles/global.css", jsx: "src/components/Templates/DashboardLayouts/AdminDashboard.jsx", stories: "src/stories/Templates/DashboardLayouts/AdminDashboard.stories.jsx" }},
      { name: "SidebarTopNav", paths: { css: "styles/Templates/DashboardLayouts/SidebarTopNav.css", globalCss: "styles/global.css", jsx: "src/components/Templates/DashboardLayouts/SidebarTopNav.jsx", stories: "src/stories/Templates/DashboardLayouts/SidebarTopNav.stories.jsx" }},
    ],
    "ECommercePages": [
      { name: "ProductPage", paths: { css: "styles/Templates/ECommercePages/ProductPage.css", globalCss: "styles/global.css", jsx: "src/components/Templates/ECommercePages/ProductPage.jsx", stories: "src/stories/Templates/ECommercePages/ProductPage.stories.jsx" }},
      { name: "ShoppingCart", paths: { css: "styles/Templates/ECommercePages/ShoppingCart.css", globalCss: "styles/global.css", jsx: "src/components/Templates/ECommercePages/ShoppingCart.jsx", stories: "src/stories/Templates/ECommercePages/ShoppingCart.stories.jsx" }},
    ],
    "AuthenticationPages": [
      { name: "SignInPage", paths: { css: "styles/Templates/AuthenticationPages/SignInPage.css", globalCss: "styles/global.css", jsx: "src/components/Templates/AuthenticationPages/SignInPage.jsx", stories: "src/stories/Templates/AuthenticationPages/SignInPage.stories.jsx" }},
      { name: "RegistrationPage", paths: { css: "styles/Templates/AuthenticationPages/RegistrationPage.css", globalCss: "styles/global.css", jsx: "src/components/Templates/AuthenticationPages/RegistrationPage.jsx", stories: "src/stories/Templates/AuthenticationPages/RegistrationPage.stories.jsx" }},
    ],
    "ContactUsPages": [
      { name: "FormSection", paths: { css: "styles/Templates/ContactUsPages/FormSection.css", globalCss: "styles/global.css", jsx: "src/components/Templates/ContactUsPages/FormSection.jsx", stories: "src/stories/Templates/ContactUsPages/FormSection.stories.jsx" }},
      { name: "LocationInfo", paths: { css: "styles/Templates/ContactUsPages/LocationInfo.css", globalCss: "styles/global.css", jsx: "src/components/Templates/ContactUsPages/LocationInfo.jsx", stories: "src/stories/Templates/ContactUsPages/LocationInfo.stories.jsx" }},
      { name: "SocialMediaLinks", paths: { css: "styles/Templates/ContactUsPages/SocialMediaLinks.css", globalCss: "styles/global.css", jsx: "src/components/Templates/ContactUsPages/SocialMediaLinks.jsx", stories: "src/stories/Templates/ContactUsPages/SocialMediaLinks.stories.jsx" }},
    ]
  }
}

export default Templates;

---

<img src="https://suign.github.io/assets/imgs/this_GUI.svg" alt="Cleaker Me" width="477" height="477" align="center" style={{marginBottom: '55px'}}/>
# Welcome to THIS.GUI

### **Explanation of Grouping:**
The **Atomic Design** methodology defines organisms as complex structures built from smaller components, but how we perceive complexity can vary based on context.
 Let’s break it down to align with your insight:

​	•	**Atomic**: Smallest components that are not broken down further.
Alert, Audio, Badge, Button, Caption, Checkbox, Container, Divider, Heading, Icon,  Image, Label, Link , Loader, Paragraph, ProgressBar, RadioButton, RangeInput, Select, Slider, Snackbar, Spacer, Spinner, Tag, TextArea, TextInput, Toggle, Tooltip, Video.

​	•	**Molecules**: Simple combinations of atomic components that together form a small UI feature.
Accordion, AudioPlayer, AvatarWithName, Breadcrumbs, ButtonGroup, Card, ComparisonTable, DataTable, FileUpload, FormField, Header, IconButton, ImageWithCaption, InputGroup, InputWithLabel, List, MediaCard, Modal, Navbar, Notification, PricingTable, SearchBar, Sidebar, VideoWithDescription.

​	•	**Organisms**: More complex, combining molecules and atomic components to create larger, more detailed features.

​	•	**Layout**: Components related to structuring and organizing content across the page.

​	•	**Templates**: Layouts of full pages, combining organisms and layout components.

​	•	**Pages**: Complete and functional pages made up of templates and content.

​	•	**Miscellaneous**: Utility components that don’t fit into the above categories but provide important functions, such as popovers, overlays, and media controls.

### Here’s how it breaks down:

	•	Pages combine multiple Organisms (like forms, media collections, and navigation elements) to create a full layout.
	•	Organisms themselves are composed of Molecules (which could be form fields, buttons, etc.).
	•	Molecules are built from Atoms (the smallest UI components like text, buttons, inputs).
	
# Recap of Hierarchy

	1.	**Atoms:** Basic building blocks (buttons, inputs).
	2.	**Molecules:** Small functional units combining Atoms (input groups, button groups).
	3.	**Organisms:** Larger functional blocks combining Molecules (forms, media cards).
	4.	**Layouts:** Define structure and positioning (grids, sections, flexbox).
	5.	**Pages:** Use Layouts, Organisms, Molecules, and Atoms to create entire pages.


-------------------
# 1. Atomic Components (Basic/Building Blocks)
Atomic components are the smallest building blocks and cannot be broken down further.

		**Text Components:**
	
	•	Heading (H1, H2, H3, etc.)
	•	Paragraph
	•	Label
	•	Caption

		**Interactive Components:**

	•	Button
	•	Link (Anchor)
	•	Icon (Clickable)
	•	Checkbox
	•	Radio Button
	•	Toggle/Switch
	•	Text Input
	•	Text Area
	•	Select/Dropdown
	•	Slider
	•	Range Input

		**Media Components:**
	
	•	Image
	•	Video
	•	Audio
	•	Icon

		**Visual Components:**

	•	Divider
	•	Spacer (For layout spacing)
	•	Tooltip
	•	Badge
	•	Tag/Chip

		**Feedback Components:**

	•	Loader/Spinner
	•	Progress Bar
	•	Alert
	•	Snackbar/Toast
	•	Tooltip

# 2. Molecules (Combining Atomic Components)
Molecules are combinations of atomic components that work together to form a functional unit.

		**Form Elements:**

	•	Input Group (Input with Button)
	•	Input with Label
	•	Search Bar
	•	File Upload
	•	Form Field (Label + Input + Helper Text)

		**Buttons with Icons or Text:**

	•	Icon Button (Button with Icon)
	•	Button Group (Multiple Buttons together)

		**Media Molecules:**

	•	Image with Caption
	•	Video with Controls and Description
	•	Avatar + Name
	•	Audio Player

		**Feedback Molecules:**

	•	Notification (with Alert, Title, and Action)
	•	Modal (Header, Body, Footer)

# 3. Organisms (Combining Molecules)
Organisms are larger and more complex UI components formed by grouping together multiple molecules or simple components.

		**Forms and Form Layouts:**

	•	Sign-In Form (Form fields + Submit Button)
	•	Registration Form (Fields for name, email, password + Terms Checkbox + Submit)
	•	Contact Form (Input fields + Message TextArea + Send Button)

		**Content Display:**

	•	Card (Image + Title + Description + Action Button)
	•	Media Card (Image/Video + Title + Text)
	•	List (Collection of items, e.g., a list of links or products)
	•	Accordion (Expandable sections with content inside)

		**Navigation:**

	•	Navbar (Logo + Links + Search + Menu Toggle)
	•	Sidebar (List of links for navigation)
	•	Breadcrumbs (Links showing hierarchy)
	
		**Media Collections:**

	•	Image Gallery (Grid of images with captions)
	•	Video Playlist (List of videos to watch)
	•	Carousel/Slider (Image or Media Slider)

		**Tables:**

	•	Data Table (Rows and Columns for displaying structured data)
	•	Pricing Table (Different pricing options)
	•	Comparison Table (Compares features/products)

# 4. Layout Components (Page-Level Components)
Layout components are structural elements used to organize content on a page.

	•	**Grid/Section Layouts:**

	•	Grid (Arranges items in a structured layout with rows and columns)
	•	Section (A part of the page with a header, content, and actions)
	•	Flexbox Layout (Horizontally/Vertically aligned containers)

		**Navigation & Menus:**

	•	Header (Navbar + Search + Links)
	•	Footer (Copyright + Links + Social Media Icons)
	•	Dropdown Menu (Toggleable menu of options)
	•	Pagination (Buttons for navigating multiple pages)

		**Content Organization:**

	•	Sidebar (For navigation or additional info)
	•	Tabs (Switching between different content views)
	•	Accordion (Collapsible sections)

		**Hero Sections:**

	•	Hero Banner (Large heading, subheading, image, and call to action)
	•	Hero Image/Video Section (Introductory section at the top of a page)

# 5. Templates (Combining Organisms and Layout Components)
Templates define the structure of entire pages by arranging multiple organisms and layout components.

		**Landing Pages:**

	•	Hero Section + Features List + Call-to-Action Button + Testimonials
	•	Product Landing Page (Hero, Features, Pricing, CTA)

		**Dashboard Layouts:**

	•	Sidebar + Top Navbar + Content Area
	•	Admin Dashboard (Graphs, Lists, Cards, Notifications)

		**E-Commerce Pages:**

	•	Product Page (Product Image, Description, Price, Add to Cart Button)
	•	Shopping Cart (List of items, quantity, total, checkout button)

		**Authentication Pages:**

	•	Sign-In Page (Form + Link to Register)
	•	Registration Page (Form + Link to Sign In)

		**Contact Us Page:**

	•	Form Section + Location Info + Social Media Links

# 6. Pages (Final Composition of Templates)
Pages are final representations of the full UI, using templates to create entire sections with components.

	•	Home Page
	•	About Us Page
	•	Contact Us Page
	•	User Profile Page
	•	Product Detail Page
	•	Checkout Page
	•	Blog/Article Page
	•	Admin Dashboard
	•	Search Results Page

# 7. Miscellaneous / Utility Components
These components often serve specialized purposes and improve user interaction.

		**Tooltips & Popovers:**

	•	Pop-up information when hovering over or clicking an element.
		**Overlays:**

	•	Modal/Popup Window
	•	Drawer (Slide-in navigation or settings panel)

		**Search Components:**

	•	Search Box (Input field with search button)
	•	Autocomplete/Typeahead

		**Media and Content Controls:**

	•	Audio/Video Controls (Play, Pause, Mute)
	•	Filters (Search filters, Tag filters)
	
		**Interactive Maps:**

	•	Map (With interactive markers, zoom, and pan)


----

# This.GUI
**MDX** is a powerful format because it allows you to combine the simplicity of **Markdown** with the flexibility of **React components**. This means you can write documentation, content, or pages using normal Markdown syntax and sprinkle in **React components** wherever needed.

Here’s a breakdown of how it works:

### 1. **Markdown + JSX**
MDX lets you write Markdown like usual, but when you need interactive or dynamic content, you can directly insert React components. It merges **Markdown** and **JSX** seamlessly in the same file.

Example:

```mdx
# Welcome to My Site

This is a simple introduction written in Markdown.

## Here’s a custom button:

<Button label="Click Me" />

Here is more markdown text below the button!
```

In this example:
- The heading `# Welcome to My Site` and the paragraph are standard **Markdown**.
- The `<Button />` component is a **React component** that you import and use directly in the MDX file.

### 2. **Passing Props to Components**
You can pass props to React components just like you would in a React project. This allows you to create dynamic, reusable content.

```mdx
## Example with Props

Here’s a button with dynamic props:

<Button label="Submit" color="primary" />
```

### 3. **Reusability with Components**
Since you can use any React component, you can integrate complex UI elements, such as forms, charts, or interactive widgets, into your content.

For example:

```mdx
# User Statistics

<Chart data={userData} />

This chart is embedded directly into the documentation!
```

### 4. **How to Set It Up**
To use **MDX** in your project, you’ll typically configure a tool like **Storybook**, **Next.js**, or a custom React setup.

#### With **Storybook**:
MDX is perfect for writing component documentation in **Storybook**. You can write documentation for your components and render the components directly in the docs.

```mdx
import { Button } from './Button';

<Meta title="Button" component={Button} />

# Button Component

This is the `Button` component with different styles.

<Canvas>
  <Story name="Primary Button">
    <Button label="Primary" color="primary" />
  </Story>
</Canvas>
```

#### With **Next.js**:
Next.js makes it easy to integrate MDX for static pages or blogs.

1. Install MDX support for Next.js:
   ```bash
   npm install @next/mdx @mdx-js/loader
   ```

2. Configure Next.js in `next.config.js`:
   ```js
   const withMDX = require('@next/mdx')({
     extension: /\.mdx?$/
   });
   
   module.exports = withMDX({
     pageExtensions: ['js', 'jsx', 'md', 'mdx'],
   });
   ```

3. Create an `.mdx` file and use React components inside:
   ```mdx
   # Hello World

   <Button label="Click Me" />
   ```

#### With **Gatsby**:
MDX can also be used in **Gatsby** to create rich blog posts or pages by embedding React components within Markdown.

### 5. **Where to Use MDX**
MDX is often used for:
- **Technical documentation** (with live component previews).
- **Component libraries** (Storybook).
- **Blogs or content management systems** (Next.js/Gatsby).
- **Interactive tutorials**.

### Key Advantages of MDX:
- **Markdown simplicity**: Use the same syntax you’re used to for writing docs or blog posts.
- **React components**: Dynamically enhance content with interactivity, custom UI, or reusable components.
- **Reusable content**: Leverage the power of React to make your content dynamic and interactive.

---

MDX gives you the **best of both worlds**: you can write content in **Markdown**, and whenever you need dynamic or interactive elements, you simply drop in a React component. It’s ideal for use cases where you want content and code to live together seamlessly.

Let me know if you'd like help with setting up or using MDX further!

---
// This.GUI/src/App.jsx
import React from 'react';
import { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';
import { ThemeProvider } from './themes/ThemeProvider';
import MdxProvider from './MdxProvider'; // MDX Provider
import SiteBuilder from './SiteBuilder'; // Import the site builder component
import { SelectTheme } from './stories/Molecules/SelectTheme/SelectTheme'; // Import SelectTheme
import { useTheme } from './themes/ThemeProvider'; // Import the hook

const App = () => {
  return (
    <ThemeProvider>
      <MdxProvider>
        <Router>
          {/* Top navigation */}
          <nav>
            <Link to="/" style={{ marginRight: '20px' }}>Site Builder</Link>
            <Link to="/storybook" style={{ marginRight: '20px' }}>Storybook</Link>
          </nav>

          {/* Render SelectTheme in the main app */}
          <ThemeSwitcher />

          {/* Route definitions */}
          <Routes>
            <Route path="/" element={<SiteBuilder />} /> {/* Site builder interface */}
            <Route path="/storybook" element={<Storybook />} /> {/* Documentation */}
          </Routes>
        </Router>
      </MdxProvider>
    </ThemeProvider>
  );
};

// Component to handle theme switching using the context
const ThemeSwitcher = () => {
  const { setTheme, setMode } = useTheme();

  return (
    <SelectTheme
      onThemeChange={(newTheme) => {
        setTheme(newTheme);
      }}
      onModeChange={(newMode) => {
        setMode(newMode);
      }}
    />
  );
};

// Storybook IFrame for browsing documentation
const Storybook = () => (
  <iframe
    src="http://localhost:6006" // Adjust based on your Storybook setup
    style={{ width: '100%', height: '100vh', border: 'none' }}
    title="Storybook"
  ></iframe>
);

export default App;

---

// this.GUI/src/main.jsx
import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App'; // Import App component

// Grab the container element
const container = document.getElementById('root');
const root = createRoot(container);

// Render your app using createRoot
root.render(
  <React.StrictMode>
    <App /> {/* Render the entire App component */}
  </React.StrictMode>
);

--


